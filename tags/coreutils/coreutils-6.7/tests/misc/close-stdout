#!/bin/sh
# Ensure that several programs work fine, even with stdout initially closed.
# This is effectively a test of closeout.c's close_stdout function.

# Copyright (C) 2004, 2006 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

if test "$VERBOSE" = yes; then
  set -x
  rm --version
fi

pwd=`pwd`
t0=`echo "$0"|sed 's,.*/,,'`.tmp; tmp=$t0/$$
trap 'status=$?; cd "$pwd" && chmod -R u+rwx $t0 && rm -rf $t0 && exit $status' 0
trap '(exit $?); exit $?' 1 2 13 15

framework_failure=0
mkdir -p $tmp || framework_failure=1
cd $tmp || framework_failure=1

if test $framework_failure = 1; then
  echo "$0: failure in testing framework" 1>&2
  (exit 1); exit 1
fi

PATH="$pwd/../..:$PATH"
export PATH

fail=0

# Ensure these exit successfully, even though stdout is closed,
# because they generate no output.
touch a
cp a b >&- || fail=1
test -f b || fail=1
chmod o-w . >&- || fail=1
ln a c >&- || fail=1
rm c >&- || fail=1
mkdir d >&- || fail=1
mv d e >&- || fail=1
rmdir e >&- || fail=1
touch e >&- || fail=1
sleep 0 >&- || fail=1
"$pwd/../../src/true" >&- || fail=1
"$pwd/../../src/printf" '' >&- || fail=1

# If >&- works, ensure these fail, because stdout is closed and they
# *do* generate output.  >&- apparently does not work in HP-UX 11.23.
# This test is ineffective unless /dev/stdout also works.
if "$pwd/../../src/test" -w /dev/stdout >/dev/null &&
   "$pwd/../../src/test" ! -w /dev/stdout >&-; then
  "$pwd/../../src/printf" 'foo' >&- 2>/dev/null && fail=1
  cp --verbose a b >&- 2>/dev/null && fail=1
fi

# Likewise for /dev/full, if /dev/full works.
if test -w /dev/full && test -c /dev/full; then
  "$pwd/../../src/printf" 'foo' >/dev/full 2>/dev/null && fail=1
  cp --verbose a b >/dev/full 2>/dev/null && fail=1
fi

(exit $fail); exit $fail
