#!/bin/sh
# -*- perl -*-
# Exercise base64.

# Copyright (C) 2006 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

: ${PERL=perl}
: ${srcdir=.}

$PERL -e 1 > /dev/null 2>&1 || {
  echo 1>&2 "$0: configure didn't find a usable version of Perl," \
    "so can't run this test"
  exit 77
}

exec $PERL -w -I$srcdir/.. -MCoreutils -- - <<\EOF
require 5.003;
use strict;

(my $program_name = $0) =~ s|.*/||;

# Turn off localisation of executable's ouput.
@ENV{qw(LANGUAGE LANG LC_ALL)} = ('C') x 3;

my $a39 = "YWFhY\nWFhYW\nFhYWF\nhYWFh\nYWFhY\nWFhYW\nFhYWF\n"
  . "hYWFh\nYWFhY\nWFhYW\nFh";

my @Tests =
    (
     ['empty', {IN=>''}, {OUT=>""}],
     ['inout', {IN=>'a'}, {OUT=>"YQ==\n"}],
     ['wrap', '--wrap 0', {IN=>'foo'}, {OUT=>'Zm9v'}],
     ['wrap5-39', '--wrap=5', {IN=>'a' x 39}, {OUT=>"${a39}\n"}],
     ['wrap5-40', '--wrap=5', {IN=>'a' x 40}, {OUT=>"${a39}YQ=\n=\n"}],
     ['wrap5-41', '--wrap=5', {IN=>'a' x 41}, {OUT=>"${a39}YWE\n=\n"}],
     ['wrap5-42', '--wrap=5', {IN=>'a' x 42}, {OUT=>"${a39}YWF\nh\n"}],
     ['wrap5-43', '--wrap=5', {IN=>'a' x 43}, {OUT=>"${a39}YWF\nhYQ==\n"}],
     ['wrap5-44', '--wrap=5', {IN=>'a' x 44}, {OUT=>"${a39}YWF\nhYWE=\n"}],
     ['wrap5-45', '--wrap=5', {IN=>'a' x 45}, {OUT=>"${a39}YWF\nhYWFh\n"}],
     ['wrap5-46', '--wrap=5', {IN=>'a' x 46}, {OUT=>"${a39}YWF\nhYWFh\nYQ==\n"}],
     ['baddecode', '--decode', {IN=>'a'}, {OUT=>""},
      {ERR_SUBST => 's/.*: invalid input//'}, {ERR => "\n"}, {EXIT => 1}],
     ['baddecode2', '--decode', {IN=>'ab'}, {OUT=>"i"},
      {ERR_SUBST => 's/.*: invalid input//'}, {ERR => "\n"}, {EXIT => 1}],
     ['baddecode3', '--decode', {IN=>'Zzz'}, {OUT=>"g<"},
      {ERR_SUBST => 's/.*: invalid input//'}, {ERR => "\n"}, {EXIT => 1}],
     ['baddecode4', '--decode', {IN=>'Zz='}, {OUT=>"g"},
      {ERR_SUBST => 's/.*: invalid input//'}, {ERR => "\n"}, {EXIT => 1}],
     ['baddecode5', '--decode', {IN=>'Z==='}, {OUT=>""},
      {ERR_SUBST => 's/.*: invalid input//'}, {ERR => "\n"}, {EXIT => 1}]
    );

# For each non-failing test, create a --decode test using the
# expected output (with newlines removed) as input.
my @new;
foreach my $t (@Tests)
  {
    my $exit_val;
    my $in;
    my $out;
    foreach my $e (@$t)
      {
        ref $e && ref $e eq 'HASH'
	  or next;
        defined $e->{EXIT}
	  and $exit_val = $e->{EXIT};
	defined $e->{IN}
	  and $in = $e->{IN};
	defined $e->{OUT}
	  and ($out = $e->{OUT}) =~ tr/\n//d;
      }
    defined $out && ! $exit_val
      and push @new, ["d-$t->[0]", '--decode', {IN => $out}, {OUT => $in}];
  }
push @Tests, @new;

my $save_temps = $ENV{DEBUG};
my $verbose = $ENV{VERBOSE};

my $prog = $ENV{PROG} || die "$0: \$PROG not specified in environment\n";
my $fail = run_tests ($program_name, $prog, \@Tests, $save_temps, $verbose);
exit $fail;
EOF
