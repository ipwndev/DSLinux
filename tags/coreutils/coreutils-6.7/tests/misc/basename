#!/bin/sh
# -*-perl-*-

# Copyright (C) 2006 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

: ${PERL=perl}
: ${srcdir=.}

$PERL -e 1 > /dev/null 2>&1 || {
  echo 1>&2 "$0: configure didn't find a usable version of Perl," \
    "so can't run this test"
  exit 77
}

d=$srcdir/..
exec $PERL -w -I$d -MCoreutils -- - << \EOF
require 5.003;
use strict;
use File::stat;

(my $program_name = $0) =~ s|.*/||;

# Turn off localisation of executable's ouput.
@ENV{qw(LANGUAGE LANG LC_ALL)} = ('C') x 3;

my $stat_single = stat('/');
my $stat_double = stat('//');
my $double_slash = ($stat_single->dev == $stat_double->dev
		    && $stat_single->ino == $stat_double->ino) ? '/' : '//';

my $prog = $ENV{PROG} || die "$0: \$PROG not specified in environment\n";

my @Tests =
    (
     ['fail-1', {ERR => "$prog: missing operand\n"
       . "Try `$prog --help' for more information.\n"}, {EXIT => '1'}],
     ['fail-2', qw(a b c), {ERR => "$prog: extra operand `c'\n"
       . "Try `$prog --help' for more information.\n"}, {EXIT => '1'}],

     ['a', qw(d/f),        {OUT => 'f'}],
     ['b', qw(/d/f),       {OUT => 'f'}],
     ['c', qw(d/f/),       {OUT => 'f'}],
     ['d', qw(d/f//),      {OUT => 'f'}],
     ['e', qw(f),          {OUT => 'f'}],
     ['f', qw(/),          {OUT => '/'}],
     ['g', qw(//),         {OUT => "$double_slash"}],
     ['h', qw(///),        {OUT => '/'}],
     ['i', qw(///a///),    {OUT => 'a'}],
     ['j', qw(''),         {OUT => ''}],
     ['1', qw(f.s .s),     {OUT => 'f'}],
     ['2', qw(fs s),       {OUT => 'f'}],
     ['3', qw(fs fs),      {OUT => 'fs'}],
     ['4', qw(fs/ s),      {OUT => 'f'}],
     ['5', qw(dir/file.suf .suf),      {OUT => 'file'}],
     ['6', qw(// /),       {OUT => "$double_slash"}],
     ['7', qw(// //),      {OUT => "$double_slash"}],
     ['8', qw(fs x),       {OUT => 'fs'}],
     ['9', qw(fs ''),      {OUT => 'fs'}],
     ['10', qw(fs/ s/),    {OUT => 'fs'}],
   );

# Append a newline to end of each expected `OUT' string.
my $t;
foreach $t (@Tests)
  {
    my $arg1 = $t->[1];
    my $e;
    foreach $e (@$t)
      {
	$e->{OUT} = "$e->{OUT}\n"
	  if ref $e eq 'HASH' and exists $e->{OUT};
      }
  }

my $save_temps = $ENV{SAVE_TEMPS};
my $verbose = $ENV{VERBOSE};

my $fail = run_tests ($program_name, $prog, \@Tests, $save_temps, $verbose);
exit $fail;
EOF
