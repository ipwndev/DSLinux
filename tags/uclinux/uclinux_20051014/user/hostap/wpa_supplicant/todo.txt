To do:
- add WPA support to Linux Wireless Extensions
- add support for other drivers
- port for *BSD
- implement GUI for WPA Supplicant/Xsupplicant/iwconfig/iwlist
  (easy to use configuration and network stats, etc.)
- add support for TLS session resumption / fast reconnect
- EAP-TLS/TTLS/PEAP: add option for verifying authsrv identity (certificate
  CN?); could also verify certificate use fields ("server authentication" or
  all uses); verify CRL after connection has been initialized
- add support for opportunistic PMKSA caching
- hostap: try other roaming modes
- EAP-MSCHAPv2: add support for password changing
- add support for WPA with ap_scan=0 (update selected cipher etc. based on
  AssocInfo; make sure these match with configuration)
- add driver interface for using wpa_supplicant with wired interface
  (or a separate program using EAPOL library)
- EAP-AKA
- EAP-FAST
- change driver interface to pass private data pointer for all functions, not
  just the ones using events; this will break API compatibility, so this will
  need to be timed correctly during early development of a new version (e.g.,
  in 0.3.x after 0.2.x has been made the default "stable" branch)
- wpa_supplicant.conf g+rw so that frontend can change wpa_supplicant.conf
  and RECONFIG wpa_supplicant  (?)
	(or wpa_supplicant changes .conf and ctrl interface gets support for
	changing config?)
- optional security separation (build time option): run EAPOL state machines
  as non-root (need to add something like socketpair between privileged root
  process and non-root handler; send EAPOL packets between processes
  and send keying data from non-root -> privileged)
  EAPOL-Key processing (WPA & WEP keys) could be in privileged part
  at least in the beginning; some parts might end up being moved to
  non-root part eventually
