dnl -----------------------------------------------------------------------
dnl configure.in for xmp
dnl
dnl Process this file with autoconf to produce a configure script.
dnl $Id: configure.in,v 1.43 2007/12/02 01:19:45 cmatsuoka Exp $
dnl -----------------------------------------------------------------------

AC_INIT
AC_CONFIG_SRCDIR([src/include/xmp.h])
AC_CONFIG_HEADER(src/include/config.h)
AC_CONFIG_AUX_DIR(./scripts)

AC_CANONICAL_HOST

AC_SUBST(CINCS)
CINCS="${CPPFLAGS}"

AC_SUBST(PLUGINS)
PLUGINS=""

AC_SUBST(LDFLAGS)
LDFLAGS=""

AC_SUBST(DRIVERS)
DRIVERS=""

AC_SUBST(MIXER)
MIXER="mix_all.o"

AC_SUBST(LIBM)
LIBM="-lm"


dnl -----------------------------------------------------------------------
dnl Config arguments
dnl -----------------------------------------------------------------------

AC_ARG_ENABLE(oss,
    [  --disable-oss           Don't compile OSS support])

AC_ARG_ENABLE(alsa,
    [  --disable-alsa          Don't compile ALSA support])

AC_ARG_ENABLE(arts,
    [  --enable-arts           Compile aRts support])

AC_ARG_ENABLE(nas,
    [  --enable-nas            Compile NAS support])

AC_ARG_ENABLE(pulseaudio,
    [  --enable-pulseaudio     Compile PulseAudio support])

AC_ARG_ENABLE(xmms-plugin,
    [  --enable-xmms-plugin    Compile the XMMS plugin])

AC_ARG_ENABLE(bmp-plugin,
    [  --enable-bmp-plugin     Compile the Beep Media Player plugin])

AC_ARG_ENABLE(audacious-plugin,
    [  --enable-audacious-plugin Compile the Audacious plugin])

AC_ARG_ENABLE(winamp-plugin,
    [  --enable-winamp-plugin  Compile the Winamp plugin])

AC_ARG_ENABLE(esd,
    [  --enable-esd            Compile ESD support])

AC_ARG_WITH(oss,
    [  --with-oss=<path>       OSS prefix (optional)],
    oss_path="$withval",
    oss_path="/usr/lib/oss")

AC_ARG_WITH(esd,
    [  --with-esd=<path>       ESD prefix (optional)],
    esd_path="$withval")

AC_ARG_WITH(nas,
    [  --with-nas=<path>       NAS prefix (optional)],
    nas_path="$withval")

dnl -----------------------------------------------------------------------
dnl Sanitize prefixes
dnl -----------------------------------------------------------------------

dnl Don't use things like /usr/etc or /usr/var

fix_prefix=no
if test "x$prefix" = xNONE; then
    fix_prefix=yes
elif test "x$prefix" = x/usr -o "x$prefix" = x/usr/local; then
    fix_prefix=yes
fi

if test $fix_prefix = yes -a $sysconfdir = '${prefix}/etc'; then
    sysconfdir=/etc
    localstatedir=/var
fi

dnl -----------------------------------------------------------------------
dnl Check platform.
dnl -----------------------------------------------------------------------

if test -z "${target}"; then
    target=${host}
    target_cpu=${host_cpu}
    target_vendor=${host_vendor}
    target_os=${host_os}
fi

AC_SUBST(PLATFORM)
PLATFORM="${target}"

case ${target_cpu} in
powerpc64)
    CFLAGS="${CFLAGS} -m64"
    LDFLAGS="${LDFLAGS} -m64"
    ;;
esac

case ${target_os} in
cygwin* | mingw*)
    is_win32=yes
    CFLAGS="${CFLAGS}"
    enable_arts=no
    enable_xmms_plugin=no
    enable_bmp_plugin=no
    enable_audacious_plugin=no
    ;;
esac

dnl -----------------------------------------------------------------------
dnl Check for programs.
dnl -----------------------------------------------------------------------

AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_PROG_RANLIB

AC_HEADER_STDC

dnl XMP_CACHED_TEST(<message>,<cache-var>,<test>,<ifyes>,<ifno>)
define(XMP_CACHED_TEST,[
    AC_CACHE_CHECK([$1],[$2],[
        if test [$3]; then
            $2=yes
        else
            $2=no
        fi])
    if test "x$$2" = xyes; then
        true
        $4
    else
        true
        $5
    fi])

dnl -----------------------------------------------------------------------
dnl Check for OSS
dnl -----------------------------------------------------------------------

XMP_CACHED_TEST(for ${oss_path},ac_cv_dir_usr_lib_oss,-d /usr/lib/oss,
    CINCS="${CINCS} -I/usr/lib/oss/include",
    XMP_CACHED_TEST(for /usr/src/sys/i386/isa/sound,
        ac_cv_dir_usr_src_sys_i386_isa_sound,
        -d /usr/src/sys/i386/isa/sound,
        CINCS="${CINCS} -I/usr/src/sys/i386/isa/sound",))

dnl -----------------------------------------------------------------------
dnl Check for XMMS
dnl -----------------------------------------------------------------------

if test "${enable_xmms_plugin}" = "yes"; then
    xmms_cflags="`xmms-config --cflags 2>/dev/null`"
    if test ! -z "${xmms_cflags}"; then
        AS_MESSAGE(checking for XMMS flags... ${xmms_cflags}...)
    else
        if test "${enable_xmms_plugin}" = "yes"; then
            AC_MSG_ERROR(Can't find XMMS files)
        fi
        AC_MSG_WARN(not found)
        enable_xmms_plugin="no"
    fi
fi

if test "${enable_xmms_plugin}" = "yes"; then
    CPPFLAGS="${CINCS} `xmms-config --cflags`"
    AC_CHECK_HEADERS(xmms/plugin.h)

    if test "${ac_cv_header_xmms_plugin_h}" = "yes"; then
        PLUGINS="$PLUGINS xmms"
    fi
fi

dnl -----------------------------------------------------------------------
dnl Check for Beep Media Player
dnl -----------------------------------------------------------------------

if test "${enable_bmp_plugin}" = "yes"; then
    bmp_cflags="`pkg-config --cflags bmp 2>/dev/null`"
    if test ! -z "${bmp_cflags}"; then
        AS_MESSAGE(checking for Beep Media Player flags... ${bmp_cflags}...)
    else
        if test "${enable_bmp_plugin}" = "yes"; then
            AC_MSG_ERROR(Can't find Beep Media Player files)
        fi
        AC_MSG_WARN(not found)
        enable_bmp_plugin="no"
    fi
fi

if test "${enable_bmp_plugin}" = "yes"; then
    CPPFLAGS="${CINCS} `pkg-config --cflags bmp`"
    AC_CHECK_HEADERS(bmp/plugin.h)

    if test "${ac_cv_header_bmp_plugin_h}" = "yes"; then
        PLUGINS="$PLUGINS bmp"
    fi
fi

dnl -----------------------------------------------------------------------
dnl Check for Audacious
dnl -----------------------------------------------------------------------

if test "${enable_audacious_plugin}" = "yes"; then
    audacious_cflags="`pkg-config --cflags audacious 2>/dev/null`"
    if test ! -z "${audacious_cflags}"; then
        AS_MESSAGE(checking for Audacious flags... ${audacious_cflags}...)
    else
        if test "${enable_audacious_plugin}" = "yes"; then
            AC_MSG_ERROR(Can't find Audacious files)
        fi
        AC_MSG_WARN(not found)
        enable_audacious_plugin="no"
    fi
fi

if test "${enable_audacious_plugin}" = "yes"; then
    CPPFLAGS="${CINCS} `pkg-config --cflags audacious`"
    AC_CHECK_HEADERS(audacious/plugin.h)

    if test "${ac_cv_header_audacious_plugin_h}" = "yes"; then
        PLUGINS="$PLUGINS audacious"
    fi
fi

dnl -----------------------------------------------------------------------
dnl Check for Winamp SDK
dnl -----------------------------------------------------------------------

if test "${enable_winamp_plugin}" = "yes"; then
    PLUGINS="$PLUGINS winamp"
fi

dnl -----------------------------------------------------------------------
dnl Check for aRts
dnl -----------------------------------------------------------------------

if test "${enable_arts}" = "yes"; then
    arts_cflags="`artsc-config --cflags 2>/dev/null`"
    if test ! -z "${arts_cflags}"; then
	AS_MESSAGE(checking for aRts flags... ${arts_cflags}...)
    else
	if test "${enable_arts}" = "yes"; then
	    AC_MSG_ERROR(Can't find aRts files (is artsc-config in PATH?))
	fi
        AC_MSG_WARN(artsc-config not found)
	enable_arts="no"
    fi
fi

if test "${enable_arts}" = "yes"; then
    CPPFLAGS="${CINCS} `artsc-config --cflags`"
    AC_CHECK_HEADERS(artsc.h)
fi

dnl -----------------------------------------------------------------------
dnl Check for header files
dnl -----------------------------------------------------------------------

if test "$esd_path" != ""; then
    CINCS="${CINCS} -I${esd_path}/include"
fi

if test "$nas_path" != ""; then
    CINCS="${CINCS} -I${nas_path}/include"
fi

CPPFLAGS="${CINCS}"

AC_CHECK_HEADERS(strings.h getopt.h sys/select.h sys/param.h \
    termios.h sys/shm.h sys/soundcard.h machine/soundcard.h \
    sys/ultrasound.h linux/ultrasound.h machine/ultrasound.h \
    awe_voice.h sys/awe_voice.h linux/awe_voice.h \
    alsa/asoundlib.h esd.h pulse/simple.h)

AC_CHECK_HEADERS(audio/audiolib.h audio/soundlib.h,,,
[[#if HAVE_AUDIO_AUDIOLIB_H
#include <audio/audiolib.h>
#endif
]])

dnl -----------------------------------------------------------------------
dnl Check OS/architecture independent drivers
dnl -----------------------------------------------------------------------

dnl Needed by NAS
AC_PATH_XTRA

dnl Don't use NetBSD's Linux OSS emulation
case ${target_os} in
netbsd*)
    if test "${enable_oss}" != "yes"; then
	enable_oss=no
    fi
    ;;
esac

if test "${ac_cv_header_sys_soundcard_h}" = "yes" || \
    test "${ac_cv_header_machine_soundcard_h}" = "yes"; then
    if test "${enable_oss}" != "no" && test -z "$is_win32"; then
	DRIVERS="${DRIVERS} oss_seq.o oss_mix.o"
	AC_DEFINE(DRIVER_OSS_SEQ)
	AC_DEFINE(DRIVER_OSS_MIX)
    fi
fi 

if test "${ac_cv_header_alsa_asoundlib_h}" = "yes"; then
    AC_CHECK_LIB(asound, snd_ctl_open, [
    if test "${enable_alsa}" != "no"; then
	LIBS="${LIBS} -lasound"
	DRIVERS="${DRIVERS} alsa.o"
	AC_DEFINE(DRIVER_ALSA_MIX)
    fi])
else
    if test "${enable_alsa}" = "yes"; then
	AC_MSG_ERROR(Can't find ALSA header files)
    fi
    AC_MSG_WARN(ALSA support disabled) 
    enable_alsa="no"
fi

if test "${enable_esd}" = "yes"; then
    if test "${ac_cv_header_esd_h}" = "yes"; then
        if test "$esd_path" != ""; then
            LIBS="${LIBS} -L${esd_path}/lib"
        fi
        AC_CHECK_LIB(esd, esd_play_stream, [
            LIBS="${LIBS} -lesd"
            DRIVERS="${DRIVERS} esd.o"
            AC_DEFINE(DRIVER_ESD)
        ])
    else
        AC_MSG_ERROR(Can't find EsounD header files)
    fi
else
    enable_esd="no"
fi

if test "${enable_arts}" = "yes"; then
    if test "${ac_cv_header_artsc_h}" = "yes"; then
        AC_CHECK_LIB(artsc, arts_init, [
            LIBS="${LIBS} `artsc-config --libs`"
            DRIVERS="${DRIVERS} arts.o"
            AC_DEFINE(DRIVER_ARTS)
        ])
    fi
else
    enable_arts="no"
fi

if test "${ac_cv_header_audio_audiolib_h}" = "yes" && \
    test "${ac_cv_header_audio_soundlib_h}" = "yes"; then
    OLDLIBS="${LIBS}"
    LIBS="-L${ac_x_libraries} -lXt -lX11"
    AC_CHECK_LIB(audio, AuOpenServer, [
    if test "${enable_nas}" = yes; then
	OLDLIBS="${OLDLIBS} -laudio -L${ac_x_libraries} -lXt -lX11"
	DRIVERS="${DRIVERS} nas.o"
	AC_DEFINE(DRIVER_NAS)
    fi])
    LIBS="$OLDLIBS"
fi

if test "${enable_pulseaudio}" = "yes"; then
    if test "${ac_cv_header_pulse_simple_h}" = "yes"; then
        AC_CHECK_LIB(pulse-simple, pa_simple_new, [
	    CFLAGS="${CFLAGS} `pkg-config --cflags libpulse-simple`"
            LIBS="${LIBS} `pkg-config --libs libpulse-simple`"
            DRIVERS="${DRIVERS} pulseaudio.o"
            AC_DEFINE(DRIVER_PULSEAUDIO)
        ])
    fi
else
    enable_arts="no"
fi

dnl -----------------------------------------------------------------------
dnl OS/Architecture dependent options
dnl -----------------------------------------------------------------------

case ${target_os} in
dnl
dnl	Tests for non-OSS Linux
dnl
linux*) 
    case ${target_cpu} in
    dnl
    dnl	S/Linux
    dnl
    sparc)
	CINCS="${CINCS} -I/usr/src/linux/drivers"
	CPPFLAGS="${CINCS}"
	AC_CHECK_HEADERS(sbus/audio/audio.h)
	if test "${ac_cv_header_sbus_audio_audio_h}" = "yes"; then
	    DRIVERS="${DRIVERS} solaris.o"
	    AC_DEFINE(DRIVER_SOLARIS)
	fi
	;;
    dnl
    dnl	Linux/Alpha
    dnl
    alpha)
        ;;
    esac
    ;;
dnl
dnl	Test for OSX
dnl
darwin*)
    AC_CHECK_HEADERS(CoreAudio/CoreAudio.h)
    if test "${ac_cv_header_CoreAudio_CoreAudio_h}" = "yes"; then
	DRIVERS="${DRIVERS} osx.o"
	LIBS="${LIBS} -framework AudioToolbox -framework AudioUnit -framework CoreServices"
	AC_DEFINE(DRIVER_OSX)
    fi
    ;;
dnl
dnl	Test for HP-UX
dnl
hpux*)
    AC_CHECK_HEADERS(sys/audio.h)
    if test "${ac_cv_header_sys_audio_h}" = "yes"; then
	DRIVERS="${DRIVERS} hpux.o"
	AC_DEFINE(DRIVER_HPUX)
    fi
    ;;
dnl
dnl	Test for Solaris
dnl
solaris*)
    AC_CHECK_HEADERS(sys/audioio.h sys/audio.io.h sun/audioio.h)
    if test "${ac_cv_header_sys_audioio_h}" = "yes" || \
	test "${ac_cv_header_sys_audio_io_h}" = "yes" || \
	test "${ac_cv_header_sun_audioio_h}" = "yes"; then
	DRIVERS="${DRIVERS} solaris.o"
	AC_DEFINE(DRIVER_SOLARIS)
    fi
    ;;
dnl
dnl	Test for SGI
dnl
irix*)
    AC_CHECK_HEADERS(dmedia/audio.h)
    if test "${ac_cv_header_dmedia_audio_h}" = "yes"; then
	DRIVERS="${DRIVERS} sgi.o"
	LIBS="${LIBS} -laudio"
	AC_DEFINE(DRIVER_SGI)
    fi
    ;;
dnl
dnl	Test for AIX
dnl
aix*)
    AC_CHECK_HEADERS(audio.h)
    if test "${ac_cv_header_audio_h}" = "yes"; then
	DRIVERS="${DRIVERS} aix.o"
	AC_DEFINE(DRIVER_AIX)
    fi
    ;;
dnl
dnl	Test for FreeBSD
dnl
freebsd*)
    AC_CHECK_HEADERS(sys/resource.h sys/rtprio.h)
    ;;
dnl
dnl     Test for NetBSD
dnl
netbsd*)
    AC_CHECK_HEADERS(sys/audioio.h)
    if test "${ac_cv_header_sys_audioio_h}" = "yes"; then
        DRIVERS="${DRIVERS} netbsd.o"
        AC_DEFINE(DRIVER_NETBSD)
    fi
    ;;
dnl
dnl	Test for OpenBSD
dnl	fixed by Chris Cox <cox.christopher@gmail.com>
dnl
openbsd*)
    AC_CHECK_HEADERS(sys/audio.h sys/audioio.h)
    if test "${ac_cv_header_sys_audio_h}" = "yes"; then
	DRIVERS="${DRIVERS} openbsd.o"
	AC_DEFINE(DRIVER_OPENBSD)
    elif test "${ac_cv_header_sys_audioio_h}" = "yes"; then
	DRIVERS="${DRIVERS} openbsd.o"
	AC_DEFINE(DRIVER_OPENBSD)
    fi
    ;;
dnl
dnl	Test for QNX
dnl
qnx*)
    AC_CHECK_HEADERS(sys/audio.h)
    if test "${ac_cv_header_sys_audio_h}" = "yes"; then
	DRIVERS="${DRIVERS} qnx.o"
	AC_DEFINE(DRIVER_QNX)
    fi
    ;;
dnl
dnl	Test for QNX 6
dnl
nto-qnx*)
    AC_CHECK_HEADERS(sys/asoundlib.h)
    if test "${ac_cv_header_sys_asoundlib_h}" = "yes"; then
	DRIVERS="${DRIVERS} alsa05.o"
	AC_DEFINE(DRIVER_ALSA05)
	LIBS="${LIBS} -lasound"
    fi
    ;;
dnl
dnl	Test for BeOS
dnl
beos*)
    AC_CHECK_HEADERS(SoundPlayer.h)
    if test "${ac_cv_header_SoundPlayer_h}" = "yes"; then
	DRIVERS="${DRIVERS} beos.o"
	AC_DEFINE(DRIVER_BEOS)
	LIBS="${LIBS} -lmedia -lbe"
	LIBM=""
    fi
    ;;
dnl
dnl	Test for AmigaOS
dnl
amigaos*|aros)
    DRIVERS="${DRIVERS} amiga.o"
    AC_DEFINE(DRIVER_AMIGA)
    ;;
dnl
dnl	Test for Mingw32
dnl
mingw32*)
    AC_CHECK_HEADERS(mmsystem.h)
    if test "${ac_cv_header_mmsystem_h}" = "yes"; then
	DRIVERS="${DRIVERS} win32.o"
	LIBS="${LIBS} -luser32 -lgdi32 -lwinmm"
	AC_DEFINE(DRIVER_WIN32)
    fi
    ;;
dnl
dnl	Test for Cygwin32
dnl
cygwin*)
    AC_CHECK_HEADERS(mmsystem.h)
    if test "${ac_cv_header_mmsystem_h}" = "yes"; then
	DRIVERS="${DRIVERS} win32.o"
	LIBS="${LIBS} -lcygwin -luser32 -lgdi32 -lwinmm"
	AC_DEFINE(DRIVER_WIN32)
    fi
    ;;
esac

dnl -----------------------------------------------------------------------
dnl Checks for typedefs, structures, and compiler characteristics.
dnl -----------------------------------------------------------------------

dnl XMP_CACHED_TRY_COMPILE(<message>,<cache-var>,<headers>,<body>,<ifyes>,<ifno>)
define(XMP_CACHED_TRY_COMPILE,[
    AC_CACHE_CHECK([$1],[$2],[AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[$3]], [[$4]])],[$2=yes],[$2=no])])
    if test "x$$2" = xyes; then
        true
        $5
    else
        true
        $6
    fi])

dnl XMP_CACHED_TRY_RUN(<message>,<cache-var>,<flags>,<program>,<ifyes>,<ifno>)
define(XMP_CACHED_TRY_RUN,[
    if test "${cross_compiling}" = no; then
	AC_CACHE_CHECK([$1],[$2],[
            oldcflags="${CFLAGS}"
	    CFLAGS="${CFLAGS} $3"
	    AC_RUN_IFELSE([AC_LANG_SOURCE([[$4]])],[$2=yes],[$2=no],[true])
	    CFLAGS="${oldcflags}"])
	if test "x$$2" = xyes; then
	    CFLAGS="${CFLAGS} $3"
	    $5
	else
	    true
	    $6
	fi
    else
	echo "not checking $1 (cross-compiling)"
    fi])

if test "${GCC-no}" = yes; then
    CFLAGS="${CFLAGS} -Wall -finline-functions"
    XMP_CACHED_TRY_RUN(whether gcc needs -fsigned-char,
        ac_cv_c_flag_f_signed_char,,[
        main(){char foo=0xff;return(foo<0);}],
	CFLAGS="${CFLAGS} -fsigned-char")
fi

for sound_hdr in sys/soundcard.h machine/soundcard.h; do
    sound_safe=`echo "$sound_hdr" | sed 'y%./+-%__p_%'`
    if eval "test \"`echo '$ac_cv_header_'$sound_safe`\" = yes"; then
	XMP_CACHED_TRY_COMPILE(whether $sound_hdr knows about audio_buf_info,
	    ac_cv_audio_buf_info,[
#include <$sound_hdr>],
	audio_buf_info info;,
	AC_DEFINE(HAVE_AUDIO_BUF_INFO),)
    fi
done

for sound_hdr in awe_voice.h sys/awe_voice.h linux/awe_voice.h; do
    sound_safe=`echo "$sound_hdr" | sed 'y%./+-%__p_%'`
    if eval "test \"`echo '$ac_cv_header_'$sound_safe`\" = yes"; then
	XMP_CACHED_TRY_COMPILE(whether $sound_hdr knows about AWE_MD_NEW_VOLUME_CALC,
	    ac_cv_awe_md_new_volume_calc,[
#include <$sound_hdr>],
	int foo=AWE_MD_NEW_VOLUME_CALC;,
	AC_DEFINE(HAVE_AWE_MD_NEW_VOLUME_CALC),)
    fi
done

if test "${GCC-no}" != yes; then
    dnl For the XL C compiler
    XMP_CACHED_TRY_RUN(whether the compiler needs -qchars=signed,
        ac_cv_c_flag_q_chars_signed,,[
        main(){char foo=0xff;return(foo<0);}],
	CFLAGS="${CFLAGS} -qchars=signed")
fi
    
if test "${PACKED}" = no; then
    AC_MSG_ERROR(Don't know how to use packed data structures!)
fi

dnl -----------------------------------------------------------------------
dnl Checks for library functions.
dnl -----------------------------------------------------------------------

AC_PROG_GCC_TRADITIONAL
AC_TYPE_SIGNAL
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(select getopt_long snprintf)

AC_CONFIG_FILES([Makefile.rules])
AC_OUTPUT

