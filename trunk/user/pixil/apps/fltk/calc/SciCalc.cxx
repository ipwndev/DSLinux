/*                                                                       
 * Copyright (c) 2003 Century Software, Inc.   All Rights Reserved.     
 *                                                                       
 * This file is part of the PIXIL Operating Environment                 
 *                                                                       
 * The use, copying and distribution of this file is governed by one    
 * of two licenses, the PIXIL Commercial License, or the GNU General    
 * Public License, version 2.                                           
 *                                                                       
 * Licensees holding a valid PIXIL Commercial License may use this file 
 * in accordance with the PIXIL Commercial License Agreement provided   
 * with the Software. Others are governed under the terms of the GNU   
 * General Public License version 2.                                    
 *                                                                       
 * This file may be distributed and/or modified under the terms of the  
 * GNU General Public License version 2 as published by the Free        
 * Software Foundation and appearing in the file LICENSE.GPL included   
 * in the packaging of this file.                                      
 *                                                                       
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING  
 * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A            
 * PARTICULAR PURPOSE.                                                  
 *                                                                       
 * RESTRICTED RIGHTS LEGEND                                             
 *                                                                     
 * Use, duplication, or disclosure by the government is subject to      
 * restriction as set forth in paragraph (b)(3)(b) of the Rights in     
 * Technical Data and Computer Software clause in DAR 7-104.9(a).       
 *                                                                      
 * See http://embedded.centurysoftware.com/gpl/ for GPL licensing       
 * information.                                                         
 *                                                                      
 * See http://embedded.centurysoftware.com/license.html or              
 * email cetsales@centurysoftware.com for information about the PIXIL   
 * Commercial License Agreement, or if any conditions of this licensing 
 * are not clear to you.                                                
 */


// generated by Fast Light User Interface Designer (fluid) version 2.00
// Altered by Shaun Kruger

#include "SciCalc.h"
#include <stdio.h>
#include <string.h>
#include <math.h>

#ifdef NANOX
#include <nano-X.h>

#define DEF_STYLE (GR_WM_PROPS_APPWINDOW | GR_WM_PROPS_NOAUTORESIZE | GR_WM_PROPS_CAPTION|GR_WM_PROPS_CLOSEBOX)
#endif

//change these later...
#ifndef WIDTH
#define WIDTH W_W
#endif
//181
#ifndef HEIGHT
#define HEIGHT W_H
#endif
//262

#define DEF_COLOR		FL_LIGHT3

static double
gammaln(double xx)
{
    int j;
    double x, y, tmp, ser;
    static double cof[6] = { 76.18009172947146,
	-86.50532032941677,
	24.01409824083091,
	-1.231739572450155,
	0.1208650973866179e-2,
	-0.5395239384953e-5
    };

    y = x = xx;
    tmp = x + 5.5;
    tmp -= (x + 0.5) * log(tmp);
    ser = 1.000000000190015;
    for (j = 0; j < 6; j++)
	ser += cof[j] / ++y;
    return -tmp + log(2.5066282746310005 * ser / x);
}

static double
truncf(double x)
{
    if (x < 0.0)
	x = -floor(-x);
    else
	x = floor(x);
    return x;
}


inline void
SciCalc::cb_leddisplay_i(StaticText * o, void *)
{
    o->value("0 ");
}

void
SciCalc::cb_leddisplay(StaticText * o, void *v)
{
    ((SciCalc *) v)->cb_leddisplay_i(o, v);
}

inline void
SciCalc::cb_box_DEGRAD_i(StaticText * o, void *)
{
    o->value(" ");
}

void
SciCalc::cb_box_DEGRAD(StaticText * o, void *v)
{
    ((SciCalc *) v)->cb_box_DEGRAD_i(o, v);
}

inline void
SciCalc::cb_box_M_i(StaticText * o, void *)
{
    o->value("M");
}

void
SciCalc::cb_box_M(StaticText * o, void *v)
{
    ((SciCalc *) v)->cb_box_M_i(o, v);
}

inline void
SciCalc::cb_radio_2_i(Fl_Button *, void *)
{
    change_base(2);
}

void
SciCalc::cb_radio_2(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_radio_2_i(o, v);
}

inline void
SciCalc::cb_radio_8_i(Fl_Button *, void *)
{
    change_base(8);
}

void
SciCalc::cb_radio_8(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_radio_8_i(o, v);
}

inline void
SciCalc::cb_radio_10_i(Fl_Button *, void *)
{
    change_base(10);
}

void
SciCalc::cb_radio_10(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_radio_10_i(o, v);
}

inline void
SciCalc::cb_radio_16_i(Fl_Button *, void *)
{
    change_base(16);
}

void
SciCalc::cb_radio_16(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_radio_16_i(o, v);
}

inline void
SciCalc::cb_but_7_i(Fl_Button *, void *)
{
    handle_number(7);
}

void
SciCalc::cb_but_7(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_7_i(o, v);
}

inline void
SciCalc::cb_but_8_i(Fl_Button *, void *)
{
    handle_number(8);
}

void
SciCalc::cb_but_8(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_8_i(o, v);
}

inline void
SciCalc::cb_but_9_i(Fl_Button *, void *)
{
    handle_number(9);
}

void
SciCalc::cb_but_9(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_9_i(o, v);
}

inline void
SciCalc::cb_but_4_i(Fl_Button *, void *)
{
    handle_number(4);
}

void
SciCalc::cb_but_4(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_4_i(o, v);
}

inline void
SciCalc::cb_but_5_i(Fl_Button *, void *)
{
    handle_number(5);
}

void
SciCalc::cb_but_5(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_5_i(o, v);
}

inline void
SciCalc::cb_but_6_i(Fl_Button *, void *)
{
    handle_number(6);
}

void
SciCalc::cb_but_6(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_6_i(o, v);
}

inline void
SciCalc::cb_but_1_i(Fl_Button *, void *)
{
    handle_number(1);
}

void
SciCalc::cb_but_1(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_1_i(o, v);
}

inline void
SciCalc::cb_but_2_i(Fl_Button *, void *)
{
    handle_number(2);
}

void
SciCalc::cb_but_2(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_2_i(o, v);
}

inline void
SciCalc::cb_but_3_i(Fl_Button *, void *)
{
    handle_number(3);
}

void
SciCalc::cb_but_3(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_3_i(o, v);
}

inline void
SciCalc::cb_but_0_i(Fl_Button *, void *)
{
    handle_number(0);
}

void
SciCalc::cb_but_0(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_0_i(o, v);
}

inline void
SciCalc::cb_but_dot_i(Fl_Button *, void *)
{
    handle_number(DOT);
}

void
SciCalc::cb_but_dot(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_dot_i(o, v);
}

inline void
SciCalc::cb_but_sign_i(Fl_Button *, void *)
{
    if (!emode) {
	value[top] = -value[top];
	set_display(value[top], NORM);
    } else {
	exponent = -exponent;
	value[top] = mantissa * pow(10.0, (double) exponent);
	set_display(mantissa, EXP);
    }
}
void
SciCalc::cb_but_sign(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_sign_i(o, v);
}

inline void
SciCalc::cb_but_C_i(Fl_Button *, void *)
{
    init_value(top);
    set_display(0.0, NORM);
}

void
SciCalc::cb_but_C(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_C_i(o, v);
}

inline void
SciCalc::cb_but_AC_i(Fl_Button *, void *)
{
    init_value(0);
    set_display(0.0, NORM);
    currentbrkt = 0;
    box_bracket->value("");
    box_bracket->redraw();
}

void
SciCalc::cb_but_AC(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_AC_i(o, v);
}

inline void
SciCalc::cb_but_X_i(Fl_Button *, void *)
{
    handle_operator(MULT);
}

void
SciCalc::cb_but_X(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_X_i(o, v);
}

inline void
SciCalc::cb_but_div_i(Fl_Button *, void *)
{
    handle_operator(DIV);
}

void
SciCalc::cb_but_div(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_div_i(o, v);
}

inline void
SciCalc::cb_but_plus_i(Fl_Button *, void *)
{
    handle_operator(PLUS);
}

void
SciCalc::cb_but_plus(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_plus_i(o, v);
}

inline void
SciCalc::cb_but_minus_i(Fl_Button *, void *)
{
    handle_operator(MINUS);
}

void
SciCalc::cb_but_minus(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_minus_i(o, v);
}

inline void
SciCalc::cb_but_pi_i(Fl_Button *, void *)
{
    exponent_pi();
}

void
SciCalc::cb_but_pi(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_pi_i(o, v);
}

inline void
SciCalc::cb_but_eval_i(Fl_Button *, void *)
{
    handle_operator(EVAL);
}

void
SciCalc::cb_but_eval(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_eval_i(o, v);
}

inline void
SciCalc::cb_but_sqrt_i(Fl_Button *, void *)
{
    if (base > 10)
	handle_number(10.0);
    else if (!inv) {
	value[top] = sqrt(value[top]);
	set_display(value[top], NORM);
	ready = 1;
    } else {
	value[top] = pow(value[top], 2.0);
	set_display(value[top], NORM);
	ready = 1;
    };
}

void
SciCalc::cb_but_sqrt(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_sqrt_i(o, v);
}

inline void
SciCalc::cb_but_pow_i(Fl_Button *, void *)
{
    if (base > 10)
	handle_number(11.0);
    else
	handle_operator(check_inv->value()? INVPOW : POW);
}

void
SciCalc::cb_but_pow(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_pow_i(o, v);
}

inline void
SciCalc::cb_but_sin_i(Fl_Button *, void *)
{
    if (base > 10)
	handle_number(12.0);
    else if (!inv) {
	value[top] = sin(to_drg(value[top]));
	set_display(value[top], NORM);
	ready = 1;
    } else {
	value[top] = from_drg(asin(value[top]));
	set_display(value[top], NORM);
	ready = 1;
    };
}

void
SciCalc::cb_but_sin(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_sin_i(o, v);
}

inline void
SciCalc::cb_but_cos_i(Fl_Button *, void *)
{
    if (base > 10)
	handle_number(13.0);
    else if (!inv) {
	value[top] = cos(to_drg(value[top]));
	set_display(value[top], NORM);
	ready = 1;
    } else {
	value[top] = from_drg(acos(value[top]));
	set_display(value[top], NORM);
	ready = 1;
    };
}

void
SciCalc::cb_but_cos(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_cos_i(o, v);
}

inline void
SciCalc::cb_but_tan_i(Fl_Button *, void *)
{
    if (base > 10)
	handle_number(14.0);
    else if (!inv) {
	value[top] = tan(to_drg(value[top]));
	set_display(value[top], NORM);
	ready = 1;
    } else {
	value[top] = from_drg(atan(value[top]));
	set_display(value[top], NORM);
	ready = 1;
    };
}

void
SciCalc::cb_but_tan(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_tan_i(o, v);
}

inline void
SciCalc::cb_but_log_i(Fl_Button *, void *)
{
    if (base > 10)
	handle_number(15.0);
    else if (!inv) {
	value[top] = log10(value[top]);
	set_display(value[top], NORM);
	ready = 1;
    } else {
	value[top] = pow(10.0, value[top]);
	set_display(value[top], NORM);
	ready = 1;
    };
}

void
SciCalc::cb_but_log(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_log_i(o, v);
}

inline void
SciCalc::cb_but_ln_i(Fl_Button *, void *)
{
    if (!inv) {
	value[top] = log(value[top]);
	set_display(value[top], NORM);
	ready = 1;
    } else {
	value[top] = exp(value[top]);
	set_display(value[top], NORM);
	ready = 1;
    };
}

void
SciCalc::cb_but_ln(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_ln_i(o, v);
}

inline void
SciCalc::cb_but_int_i(Fl_Button *, void *)
{
    if (!inv) {
	value[top] = truncf(value[top]);
	set_display(value[top], NORM);
	ready = 1;
    } else {
	value[top] = value[top] - truncf(value[top]);
	set_display(value[top], NORM);
	ready = 1;
    };
}

void
SciCalc::cb_but_int(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_int_i(o, v);
}

inline void
SciCalc::cb_but_dr_i(Fl_Button *, void *)
{
    if (!inv) {
	value[top] = M_PI * value[top] / 180.0;
	set_display(value[top], NORM);
	ready = 1;
    } else {
	value[top] = 180.0 * value[top] / M_PI;
	set_display(value[top], NORM);
	ready = 1;
    };
}

void
SciCalc::cb_but_dr(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_dr_i(o, v);
}

inline void
SciCalc::cb_but_drg_i(Fl_Button *, void *)
{
    drgmode++;
    drgmode %= 3;
    set_drgdisp();
}

void
SciCalc::cb_but_drg(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_drg_i(o, v);
}

inline void
SciCalc::cb_but_leftbr_i(Fl_Button *, void *)
{
    add_left_bracket();
}

void
SciCalc::cb_but_leftbr(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_leftbr_i(o, v);
}

inline void
SciCalc::cb_but_rightbr_i(Fl_Button *, void *)
{
    add_right_bracket();
}

void
SciCalc::cb_but_rightbr(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_rightbr_i(o, v);
}

inline void
SciCalc::cb_but_exch_i(Fl_Button *, void *)
{
    exchange();
}

void
SciCalc::cb_but_exch(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_exch_i(o, v);
}

inline void
SciCalc::cb_but_invx_i(Fl_Button *, void *)
{
    value[top] = 1.0 / value[top];
    set_display(value[top], NORM);
    ready = 1;
}

void
SciCalc::cb_but_invx(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_invx_i(o, v);
}

inline void
SciCalc::cb_but_fact_i(Fl_Button *, void *)
{
    factorial();
}

void
SciCalc::cb_but_fact(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_fact_i(o, v);
}

inline void
SciCalc::cb_but_Mplus_i(Fl_Button *, void *)
{
    if (!inv)
	mem += value[top];
    else
	mem -= value[top];
    set_display(value[top], NORM);
    ready = 1;
    set_memdisp();
}

void
SciCalc::cb_but_Mplus(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_Mplus_i(o, v);
}

inline void
SciCalc::cb_but_Mmult_i(Fl_Button *, void *)
{
    if (!inv)
	mem *= value[top];
    else
	mem /= value[top];
    set_display(value[top], NORM);
    ready = 1;
    set_memdisp();
}

void
SciCalc::cb_but_Mmult(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_Mmult_i(o, v);
}

inline void
SciCalc::cb_but_Mclear_i(Fl_Button *, void *v)
{
    if (!inv) {
	mem = 0.0;
	set_display(value[top], NORM);
	ready = 1;
	set_memdisp();
    } else
	memexch();
}

void
SciCalc::cb_but_Mclear(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_Mclear_i(o, v);
}

inline void
SciCalc::cb_but_Mst_i(Fl_Button *, void *)
{
    mem = value[top];
    set_display(value[top], NORM);
    ready = 1;
    set_memdisp();
}

void
SciCalc::cb_but_Mst(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_Mst_i(o, v);
}

inline void
SciCalc::cb_but_Mrc_i(Fl_Button *, void *)
{
    value[top] = mem;
    set_display(value[top], NORM);
    ready = 1;
}

void
SciCalc::cb_but_Mrc(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_Mrc_i(o, v);
}

inline void
SciCalc::cb_check_inv_i(Fl_Button *, void *)
{
    if (inv) {
	inv = 0;
	setnormlabels();
    } else {
	inv = 1;
	setinvlabels();
    };
}

void
SciCalc::cb_check_inv(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_check_inv_i(o, v);
}

inline void
SciCalc::cb_but_quit_i(Fl_Button *, void *)
{
    main_window->hide();
    delete main_window;
}

void
SciCalc::cb_but_quit(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_but_quit_i(o, v);
}

// this needs to show the sci button window and resize the simple button window
inline void
SciCalc::cb_to_sci_mode_i(Fl_Button * o, void *)
{
    SciMode = TRUE;
    to_sci_mode->hide();
    to_simple_mode->show();
    check_inv->show();
    num_mode_window->show();
    sci_view_window->show();
    sci_view_window->redraw();
    tmp_y = 70 + (old_h - 70) * 4 / 10;
    tmp_h = old_h - tmp_y;
    SetButtonWindowGeometry(0, tmp_y, old_w, tmp_h, 5, 5);
    simple_view_window->resize(0, tmp_y, old_w, tmp_h);
    but_7->resize(FL_BUTT_GEO(1, 2));
    but_8->resize(FL_BUTT_GEO(2, 2));
    but_9->resize(FL_BUTT_GEO(3, 2));
    but_4->resize(FL_BUTT_GEO(1, 3));
    but_5->resize(FL_BUTT_GEO(2, 3));
    but_6->resize(FL_BUTT_GEO(3, 3));
    but_1->resize(FL_BUTT_GEO(1, 4));
    but_2->resize(FL_BUTT_GEO(2, 4));
    but_3->resize(FL_BUTT_GEO(3, 4));
    but_0->resize(FL_BUTT_GEO(1, 5));
    but_dot->resize(FL_BUTT_GEO(2, 5));
    but_sign->resize(FL_BUTT_GEO(3, 5));
    but_C->resize(FL_BUTT_GEO(4, 2));
    but_AC->resize(FL_BUTT_GEO(5, 2));
    but_X->resize(FL_BUTT_GEO(4, 3));
    but_div->resize(FL_BUTT_GEO(5, 3));
    but_plus->resize(FL_BUTT_GEO(4, 4));
    but_minus->resize(FL_BUTT_GEO(5, 4));
    but_pi->resize(FL_BUTT_GEO(4, 5));
    but_eval->resize(FL_BUTT_GEO(5, 5));
    but_Mplus->resize(FL_BUTT_GEO(1, 1));
    but_Mmult->resize(FL_BUTT_GEO(2, 1));
    but_Mclear->resize(FL_BUTT_GEO(3, 1));
    but_Mst->resize(FL_BUTT_GEO(4, 1));
    but_Mrc->resize(FL_BUTT_GEO(5, 1));
    main_window->redraw();
}

void
SciCalc::cb_to_sci_mode(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_to_sci_mode_i(o, v);
}

// this needs to hide the sci button window and resize the simple button window
inline void
SciCalc::cb_to_simple_mode_i(Fl_Button * o, void *)
{
    SciMode = FALSE;
    tmp_y = 70;
    tmp_h = old_h - tmp_y;
    sci_view_window->hide();
    num_mode_window->hide();
    check_inv->hide();
    to_simple_mode->hide();
    to_sci_mode->show();
    radio_2->value(0);
    radio_8->value(0);
    radio_16->value(0);
    radio_10->value(1);
    SetButtonWindowGeometry(0, tmp_y, old_w, tmp_h, 5, 5);
    simple_view_window->resize(0, tmp_y, old_w, tmp_h);
    but_7->resize(FL_BUTT_GEO(1, 2));
    but_8->resize(FL_BUTT_GEO(2, 2));
    but_9->resize(FL_BUTT_GEO(3, 2));
    but_4->resize(FL_BUTT_GEO(1, 3));
    but_5->resize(FL_BUTT_GEO(2, 3));
    but_6->resize(FL_BUTT_GEO(3, 3));
    but_1->resize(FL_BUTT_GEO(1, 4));
    but_2->resize(FL_BUTT_GEO(2, 4));
    but_3->resize(FL_BUTT_GEO(3, 4));
    but_0->resize(FL_BUTT_GEO(1, 5));
    but_dot->resize(FL_BUTT_GEO(2, 5));
    but_sign->resize(FL_BUTT_GEO(3, 5));
    but_C->resize(FL_BUTT_GEO(4, 2));
    but_AC->resize(FL_BUTT_GEO(5, 2));
    but_X->resize(FL_BUTT_GEO(4, 3));
    but_div->resize(FL_BUTT_GEO(5, 3));
    but_plus->resize(FL_BUTT_GEO(4, 4));
    but_minus->resize(FL_BUTT_GEO(5, 4));
    but_pi->resize(FL_BUTT_GEO(4, 5));
    but_eval->resize(FL_BUTT_GEO(5, 5));
    but_Mplus->resize(FL_BUTT_GEO(1, 1));
    but_Mmult->resize(FL_BUTT_GEO(2, 1));
    but_Mclear->resize(FL_BUTT_GEO(3, 1));
    but_Mst->resize(FL_BUTT_GEO(4, 1));
    but_Mrc->resize(FL_BUTT_GEO(5, 1));
    change_base(10);
    main_window->redraw();


}

void
SciCalc::cb_to_simple_mode(Fl_Button * o, void *v)
{
    ((SciCalc *) v)->cb_to_simple_mode_i(o, v);
}


/* members */
/********/


SciCalc::SciCalc(bool Scientific = FALSE)
:  Fl_Double_Window(0, 0, WIDTH, HEIGHT, "Calculator")
{

    SciMode = Scientific;

    old_w = WIDTH;
    old_h = HEIGHT;

    ButtonGeometryInvalidate();

    {
	//
	// Main Calculator Container Window
	//

	Fl_Window *o = main_window = this;
	o->box(FL_UP_BOX);
	o->user_data((void *) (this));

	{

	    //
	    // LED Display Window
	    //

	    Fl_Double_Window *o = status_window =
		new Fl_Double_Window(0, 0, WIDTH, 70);
	    o->color(NxApp::Instance()->getGlobalColor(APP_BG));

	    {
		StaticText *o = leddisplay =
		    new StaticText(5, 3, WIDTH - 8, 24);
		o->box(FL_DOWN_BOX);
		o->color(NxApp::Instance()->getGlobalColor(APP_BG));
		o->labelfont(1);
		o->labelsize(16);
		o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		o->align(FL_ALIGN_RIGHT | FL_ALIGN_INSIDE);
		status_window->add((Fl_Widget *) o);
	    }

	    {
		Fl_Group *o = out_data_group =
		    new Fl_Group(((WIDTH - 135) / 2), 27, 136, 16);
		//      o->color(46);

		{
		    StaticText *o = box_DEGRAD = new StaticText(((WIDTH - 135) / 2), 29, 37, 15);	//27
		    o->box(FL_ENGRAVED_BOX);
		    o->labelsize(11);
		    o->color(NxApp::Instance()->getGlobalColor(APP_BG));
		    o->selection_color(NxApp::Instance()->
				       getGlobalColor(HILIGHT));
		    o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		    o->color(NxApp::Instance()->getGlobalColor(BUTTON_FACE));
		    o->callback((Fl_Callback *) cb_box_DEGRAD, this);
		    o->align(FL_ALIGN_CENTER | FL_ALIGN_INSIDE);
		    out_data_group->add((Fl_Widget *) o);
		}

		{
		    StaticText *o = box_bracket =
			new StaticText(((WIDTH - 135) / 2) + 36, 29, 65, 15);
		    o->box(FL_ENGRAVED_BOX);
		    o->labelsize(11);
		    o->color(NxApp::Instance()->getGlobalColor(APP_BG));
		    o->selection_color(NxApp::Instance()->
				       getGlobalColor(HILIGHT));
		    o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		    o->color(NxApp::Instance()->getGlobalColor(BUTTON_FACE));
		    o->align(FL_ALIGN_CENTER | FL_ALIGN_INSIDE);
		    out_data_group->add((Fl_Widget *) o);
		}

		{
		    StaticText *o = box_M =
			new StaticText(((WIDTH - 135) / 2) + 100, 29, 37, 15);
		    o->box(FL_ENGRAVED_BOX);
		    o->labelsize(11);
		    o->color(NxApp::Instance()->getGlobalColor(APP_BG));
		    o->selection_color(NxApp::Instance()->
				       getGlobalColor(HILIGHT));
		    o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		    o->color(NxApp::Instance()->getGlobalColor(BUTTON_FACE));
		    o->callback((Fl_Callback *) cb_box_M, this);
		    o->align(FL_ALIGN_CENTER | FL_ALIGN_INSIDE);
		    out_data_group->add((Fl_Widget *) o);
		}

		o->end();
		status_window->add((Fl_Widget *) o);
	    }

	    // Remember to scale all of these...
	    {

		//
		// Numbers Mode Window: 2, 8, 10, or 16
		//

		Fl_Double_Window *o = num_mode_window =
		    new Fl_Double_Window(((WIDTH - 93) / 2), 44, 93, 22);
		o->color(NxApp::Instance()->getGlobalColor(APP_BG));

		if (!SciMode)
		    o->hide();


		{
		    Fl_Button *o = radio_2 = new Fl_Button(3, 4, 20, 15, "2");
		    o->type(102);
		    o->labelsize(10);
		    o->color(NxApp::Instance()->getGlobalColor(APP_BG));
		    o->selection_color(NxApp::Instance()->
				       getGlobalColor(HILIGHT));
		    o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		    o->callback((Fl_Callback *) cb_radio_2, this);
		}

		{
		    Fl_Button *o = radio_8 =
			new Fl_Button(24, 4, 21, 15, "8");
		    o->type(102);
		    o->labelsize(10);
		    o->color(NxApp::Instance()->getGlobalColor(APP_BG));
		    o->selection_color(NxApp::Instance()->
				       getGlobalColor(HILIGHT));
		    o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		    o->callback((Fl_Callback *) cb_radio_8, this);
		}

		{
		    Fl_Button *o = radio_10 =
			new Fl_Button(46, 4, 21, 15, "10");
		    o->type(102);
		    o->value(1);
		    o->labelsize(10);
		    o->color(NxApp::Instance()->getGlobalColor(APP_BG));
		    o->selection_color(NxApp::Instance()->
				       getGlobalColor(HILIGHT));
		    o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		    o->callback((Fl_Callback *) cb_radio_10, this);
		}

		{
		    Fl_Button *o = radio_16 =
			new Fl_Button(68, 4, 21, 15, "16");
		    o->type(102);
		    o->labelsize(10);
		    o->color(NxApp::Instance()->getGlobalColor(APP_BG));
		    o->selection_color(NxApp::Instance()->
				       getGlobalColor(HILIGHT));
		    o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		    o->callback((Fl_Callback *) cb_radio_16, this);
		}

		o->end();
		status_window->add((Fl_Widget *) o);

	    }

	    //
	    // INV Button on SCI Mode's top left-hand side
	    //

	    {
		Fl_Button *o = check_inv =
		    new Fl_Button((((WIDTH - 93) / 2) - 32) / 2, 46,
				  WIDTH / 6 /*32 */ , 21, "inv");

		if (!SciMode)
		    o->hide();

		o->type(1);
		o->labelfont(0);
		o->labelsize(11);
		o->color(NxApp::Instance()->getGlobalColor(BUTTON_FACE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(BUTTON_TEXT));
		o->callback((Fl_Callback *) cb_check_inv, this);
		status_window->add((Fl_Widget *) o);
	    }

	    //
	    // SCI button on Reg Mode's top right-hand side
	    //

	    {
		Fl_Button *o = to_sci_mode =
		    new Fl_Button(WIDTH -
				  ((((WIDTH - 93) / 2) - 32) / 2 + 29), 46,
				  WIDTH / 6 /*29 */ , 21, "Sci");

		if (SciMode)
		    o->hide();

		o->labelfont(0);
		o->labelsize(11);
		o->color(NxApp::Instance()->getGlobalColor(BUTTON_FACE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(BUTTON_TEXT));
		o->callback((Fl_Callback *) cb_to_sci_mode, this);
		status_window->add((Fl_Widget *) o);
	    }

	    // REG button on SCI Mode's top right-hand side

	    {
		Fl_Button *o = to_simple_mode =
		    new Fl_Button(WIDTH -
				  ((((WIDTH - 93) / 2) - 32) / 2 + 29), 46,
				  WIDTH / 6 /*29 */ , 21, "Reg");

		if (!SciMode)
		    o->hide();

		o->labelfont(0);
		o->labelsize(11);
		o->color(NxApp::Instance()->getGlobalColor(BUTTON_FACE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(BUTTON_TEXT));
		o->callback((Fl_Callback *) cb_to_simple_mode, this);
		status_window->add((Fl_Widget *) o);
	    }

	}
	// This is the end of the status_window section

	{
	    if (SciMode) {
		tmp_y = 70 + (HEIGHT - 70) * 4 / 10;
	    } else {
		tmp_y = 70;
	    }

	    tmp_x = 0;
	    tmp_h = HEIGHT - tmp_y;
	    tmp_w = WIDTH;

	    SetButtonWindowGeometry(tmp_x, tmp_y, tmp_w, tmp_h, 5, 5);

	    //
	    // Regular Mode Window
	    //

	    Fl_Double_Window *o = simple_view_window =
		new Fl_Double_Window(tmp_x, tmp_y, tmp_w, tmp_h);
	    o->color(NxApp::Instance()->getGlobalColor(APP_BG));

	    {
		Fl_Button *o = but_7 = new Fl_Button(FL_BUTT_GEO(1, 2), "7");
		o->box(FL_UP_BOX);
		o->shortcut(0x37);
		o->labelfont(1);
		o->labelsize(16);
		o->color(NxApp::Instance()->getGlobalColor(BUTTON_FACE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->callback((Fl_Callback *) cb_but_7, this);
		simple_view_window->add((Fl_Widget *) o);
	    }

	    {
		Fl_Button *o = but_8 = new Fl_Button(FL_BUTT_GEO(2, 2), "8");
		o->box(FL_UP_BOX);
		o->shortcut(0x38);
		o->labelfont(1);
		o->labelsize(16);
		o->color(NxApp::Instance()->getGlobalColor(BUTTON_FACE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->callback((Fl_Callback *) cb_but_8, this);
		simple_view_window->add((Fl_Widget *) o);
	    }

	    {
		Fl_Button *o = but_9 = new Fl_Button(FL_BUTT_GEO(3, 2), "9");
		o->box(FL_UP_BOX);
		o->shortcut(0x39);
		o->labelfont(1);
		o->labelsize(16);
		o->color(NxApp::Instance()->getGlobalColor(BUTTON_FACE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->callback((Fl_Callback *) cb_but_9, this);
		simple_view_window->add((Fl_Widget *) o);
	    }

	    {
		Fl_Button *o = but_4 = new Fl_Button(FL_BUTT_GEO(1, 3), "4");
		o->box(FL_UP_BOX);
		o->shortcut(0x34);
		o->labelfont(1);
		o->labelsize(16);
		o->color(NxApp::Instance()->getGlobalColor(BUTTON_FACE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->callback((Fl_Callback *) cb_but_4, this);
		simple_view_window->add((Fl_Widget *) o);
	    }

	    {
		Fl_Button *o = but_5 = new Fl_Button(FL_BUTT_GEO(2, 3), "5");
		o->box(FL_UP_BOX);
		o->shortcut(0x35);
		o->labelfont(1);
		o->labelsize(16);
		o->color(NxApp::Instance()->getGlobalColor(BUTTON_FACE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->callback((Fl_Callback *) cb_but_5, this);
		simple_view_window->add((Fl_Widget *) o);
	    }

	    {
		Fl_Button *o = but_6 = new Fl_Button(FL_BUTT_GEO(3, 3), "6");
		o->box(FL_UP_BOX);
		o->shortcut(0x36);
		o->labelfont(1);
		o->labelsize(16);
		o->color(NxApp::Instance()->getGlobalColor(BUTTON_FACE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->callback((Fl_Callback *) cb_but_6, this);
		simple_view_window->add((Fl_Widget *) o);
	    }

	    {
		Fl_Button *o = but_1 = new Fl_Button(FL_BUTT_GEO(1, 4), "1");
		o->box(FL_UP_BOX);
		o->shortcut(0x31);
		o->labelfont(1);
		o->labelsize(16);
		o->color(NxApp::Instance()->getGlobalColor(BUTTON_FACE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->callback((Fl_Callback *) cb_but_1, this);
		simple_view_window->add((Fl_Widget *) o);
	    }

	    {
		Fl_Button *o = but_2 = new Fl_Button(FL_BUTT_GEO(2, 4), "2");
		o->box(FL_UP_BOX);
		o->shortcut(0x32);
		o->labelfont(1);
		o->labelsize(16);
		o->color(NxApp::Instance()->getGlobalColor(BUTTON_FACE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->callback((Fl_Callback *) cb_but_2, this);
		simple_view_window->add((Fl_Widget *) o);
	    }

	    {
		Fl_Button *o = but_3 = new Fl_Button(FL_BUTT_GEO(3, 4), "3");
		o->box(FL_UP_BOX);
		o->shortcut(0x33);
		o->labelfont(1);
		o->labelsize(16);
		o->color(NxApp::Instance()->getGlobalColor(BUTTON_FACE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->callback((Fl_Callback *) cb_but_3, this);
		simple_view_window->add((Fl_Widget *) o);
	    }

	    {
		Fl_Button *o = but_0 = new Fl_Button(FL_BUTT_GEO(1, 5), "0");
		o->box(FL_UP_BOX);
		o->shortcut(0x30);
		o->labelfont(1);
		o->labelsize(16);
		o->color(NxApp::Instance()->getGlobalColor(BUTTON_FACE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->callback((Fl_Callback *) cb_but_0, this);
		simple_view_window->add((Fl_Widget *) o);
	    }

	    {
		Fl_Button *o = but_dot =
		    new Fl_Button(FL_BUTT_GEO(2, 5), ".");
		o->box(FL_UP_BOX);
		o->shortcut(0x2e);
		o->labelfont(1);
		o->labelsize(16);
		o->color(NxApp::Instance()->getGlobalColor(BUTTON_FACE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->callback((Fl_Callback *) cb_but_dot, this);
		simple_view_window->add((Fl_Widget *) o);
	    }

	    {
		Fl_Button *o = but_sign =
		    new Fl_Button(FL_BUTT_GEO(3, 5), "+/-");
		o->box(FL_UP_BOX);
		o->labelfont(1);
		o->labelsize(16);
		o->color(NxApp::Instance()->getGlobalColor(HILIGHT_LITE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		o->callback((Fl_Callback *) cb_but_sign, this);
		simple_view_window->add((Fl_Widget *) o);
	    }

	    {
		Fl_Button *o = but_C = new Fl_Button(FL_BUTT_GEO(4, 2), "C");
		o->box(FL_UP_BOX);
		o->labelfont(1);
		o->labelsize(16);
		o->color(NxApp::Instance()->getGlobalColor(HILIGHT_DARK));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		o->callback((Fl_Callback *) cb_but_C, this);
		simple_view_window->add((Fl_Widget *) o);
	    }

	    {
		Fl_Button *o = but_AC =
		    new Fl_Button(FL_BUTT_GEO(5, 2), "AC");
		o->box(FL_UP_BOX);
		o->labelfont(1);
		o->labelsize(16);
		o->color(NxApp::Instance()->getGlobalColor(HILIGHT_DARK));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		o->callback((Fl_Callback *) cb_but_AC, this);
		simple_view_window->add((Fl_Widget *) o);
	    }

	    {
		Fl_Button *o = but_X = new Fl_Button(FL_BUTT_GEO(4, 3), "x");
		o->box(FL_UP_BOX);
		o->shortcut(0x2a);
		o->labelfont(1);
		o->labelsize(16);
		o->color(NxApp::Instance()->getGlobalColor(HILIGHT_LITE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		o->callback((Fl_Callback *) cb_but_X, this);
		simple_view_window->add((Fl_Widget *) o);
	    }

	    {
		Fl_Button *o = but_div =
		    new Fl_Button(FL_BUTT_GEO(5, 3), "/");
		o->box(FL_UP_BOX);
		o->shortcut(0x2f);
		o->labelfont(1);
		o->labelsize(16);
		o->color(NxApp::Instance()->getGlobalColor(HILIGHT_LITE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		o->callback((Fl_Callback *) cb_but_div, this);
		simple_view_window->add((Fl_Widget *) o);
	    }

	    {
		Fl_Button *o = but_plus =
		    new Fl_Button(FL_BUTT_GEO(4, 4), "+");
		o->box(FL_UP_BOX);
		o->shortcut(0x2b);
		o->labelfont(1);
		o->labelsize(16);
		o->color(NxApp::Instance()->getGlobalColor(HILIGHT_LITE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		o->callback((Fl_Callback *) cb_but_plus, this);
		simple_view_window->add((Fl_Widget *) o);
	    }

	    {
		Fl_Button *o = but_minus =
		    new Fl_Button(FL_BUTT_GEO(5, 4), "-");
		o->box(FL_UP_BOX);
		o->shortcut(0x2d);
		o->labelfont(1);
		o->labelsize(16);
		o->color(NxApp::Instance()->getGlobalColor(HILIGHT_LITE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		o->callback((Fl_Callback *) cb_but_minus, this);
		simple_view_window->add((Fl_Widget *) o);
	    }

	    {
		Fl_Button *o = but_pi =
		    new Fl_Button(FL_BUTT_GEO(4, 5), "e/p");
		o->box(FL_UP_BOX);
		o->labelfont(12);
		o->labelsize(17);
		o->color(NxApp::Instance()->getGlobalColor(HILIGHT_LITE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		o->callback((Fl_Callback *) cb_but_pi, this);
		simple_view_window->add((Fl_Widget *) o);
	    }

	    {
		Fl_Button *o = but_eval =
		    new Fl_Button(FL_BUTT_GEO(5, 5), "=");
		o->box(FL_UP_BOX);
		o->shortcut(0x3d);
		o->labelfont(1);
		o->labelsize(16);
		o->color(NxApp::Instance()->getGlobalColor(HILIGHT_LITE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		o->callback((Fl_Callback *) cb_but_eval, this);
		simple_view_window->add((Fl_Widget *) o);
	    }

	    {
		Fl_Button *o = but_Mplus =
		    new Fl_Button(FL_BUTT_GEO(1, 1), "M+");
		o->color(94);
		o->labelfont(0);
		o->labelsize(12);
		o->labelcolor(4);
		o->callback((Fl_Callback *) cb_but_Mplus, this);
		simple_view_window->add((Fl_Widget *) o);
	    }

	    {
		Fl_Button *o = but_Mmult =
		    new Fl_Button(FL_BUTT_GEO(2, 1), "M-");
		o->color(94);
		o->labelfont(0);
		o->labelsize(12);
		o->labelcolor(4);
		o->callback((Fl_Callback *) cb_but_Mmult, this);
		simple_view_window->add((Fl_Widget *) o);
	    }

	    {
		Fl_Button *o = but_Mclear =
		    new Fl_Button(FL_BUTT_GEO(3, 1), "MC");
		o->color(94);
		o->labelfont(0);
		o->labelsize(12);
		o->labelcolor(4);
		o->callback((Fl_Callback *) cb_but_Mclear, this);
		simple_view_window->add((Fl_Widget *) o);
	    }

	    {
		Fl_Button *o = but_Mst =
		    new Fl_Button(FL_BUTT_GEO(4, 1), "Mst");
		o->color(94);
		o->labelfont(0);
		o->labelsize(12);
		o->labelcolor(0);
		o->callback((Fl_Callback *) cb_but_Mst, this);
		simple_view_window->add((Fl_Widget *) o);
	    }

	    {
		Fl_Button *o = but_Mrc =
		    new Fl_Button(FL_BUTT_GEO(5, 1), "Mrc");
		o->color(94);
		o->labelfont(0);
		o->labelsize(12);
		o->labelcolor(0);
		o->callback((Fl_Callback *) cb_but_Mrc, this);
		simple_view_window->add((Fl_Widget *) o);
	    }

	    main_window->add((Fl_Widget *) o);
	    o->end();
	}
	// end of simple_view_window section

	{
	    tmp_y = 70 + (HEIGHT - 70) * 4 / 10;
	    tmp_h = tmp_y - 70;
	    tmp_y = 70;
	    SetButtonWindowGeometry(tmp_x, tmp_y, tmp_w, tmp_h, 5, 3);

	    //
	    // SCI Mode Window
	    //

	    Fl_Double_Window *o = sci_view_window =
		new Fl_Double_Window(tmp_x, tmp_y, tmp_w, tmp_h);
	    o->color(NxApp::Instance()->getGlobalColor(APP_BG));

	    if (!SciMode)
		o->hide();

	    {
		Fl_Button *o = but_sqrt =
		    new Fl_Button(FL_BUTT_GEO(1, 1), "sqrt");
		o->labelfont(0);
		o->labelsize(11);
		o->color(NxApp::Instance()->getGlobalColor(HILIGHT_LITE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));

		o->callback((Fl_Callback *) cb_but_sqrt, this);
	    }

	    {
		Fl_Button *o = but_pow =
		    new Fl_Button(FL_BUTT_GEO(2, 1), "x^y");
		o->labelfont(0);
		o->labelsize(11);
		o->color(NxApp::Instance()->getGlobalColor(HILIGHT_LITE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		o->callback((Fl_Callback *) cb_but_pow, this);
	    }

	    {
		Fl_Button *o = but_sin =
		    new Fl_Button(FL_BUTT_GEO(3, 1), "sin");
		o->labelfont(0);
		o->labelsize(11);
		o->color(NxApp::Instance()->getGlobalColor(HILIGHT_LITE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));

		o->callback((Fl_Callback *) cb_but_sin, this);
	    }

	    {
		Fl_Button *o = but_cos =
		    new Fl_Button(FL_BUTT_GEO(4, 1), "cos");
		o->labelfont(0);
		o->labelsize(11);
		o->color(NxApp::Instance()->getGlobalColor(HILIGHT_LITE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));

		o->callback((Fl_Callback *) cb_but_cos, this);
	    }

	    {
		Fl_Button *o = but_tan =
		    new Fl_Button(FL_BUTT_GEO(5, 1), "tan");
		o->labelfont(0);
		o->labelsize(11);
		o->color(NxApp::Instance()->getGlobalColor(HILIGHT_LITE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		o->callback((Fl_Callback *) cb_but_tan, this);
	    }

	    {
		Fl_Button *o = but_log =
		    new Fl_Button(FL_BUTT_GEO(1, 2), "log");
		o->labelfont(0);
		o->labelsize(11);
		o->color(NxApp::Instance()->getGlobalColor(HILIGHT_LITE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		o->callback((Fl_Callback *) cb_but_log, this);
	    }

	    {
		Fl_Button *o = but_ln =
		    new Fl_Button(FL_BUTT_GEO(2, 2), "ln");
		o->labelfont(0);
		o->labelsize(11);
		o->labelcolor(4);
		o->color(NxApp::Instance()->getGlobalColor(HILIGHT_LITE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));

		o->callback((Fl_Callback *) cb_but_ln, this);
	    }

	    {
		Fl_Button *o = but_int =
		    new Fl_Button(FL_BUTT_GEO(3, 2), "int");
		o->labelfont(0);
		o->labelsize(11);
		o->color(NxApp::Instance()->getGlobalColor(HILIGHT_LITE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		o->callback((Fl_Callback *) cb_but_int, this);
	    }

	    {
		Fl_Button *o = but_dr =
		    new Fl_Button(FL_BUTT_GEO(4, 2), "d->r");
		o->labelfont(0);
		o->labelsize(11);
		o->color(NxApp::Instance()->getGlobalColor(HILIGHT_LITE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		o->callback((Fl_Callback *) cb_but_dr, this);
	    }

	    {
		Fl_Button *o = but_drg =
		    new Fl_Button(FL_BUTT_GEO(5, 2), "d-r-g");
		o->labelfont(0);
		o->labelsize(11);
		o->color(NxApp::Instance()->getGlobalColor(HILIGHT_LITE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		o->callback((Fl_Callback *) cb_but_drg, this);
	    }

	    {
		Fl_Button *o = but_leftbr =
		    new Fl_Button(FL_BUTT_GEO(1, 3), "[");
		o->shortcut(0x28);
		o->labelfont(0);
		o->labelsize(11);
		o->color(NxApp::Instance()->getGlobalColor(HILIGHT_LITE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		o->callback((Fl_Callback *) cb_but_leftbr, this);
	    }

	    {
		Fl_Button *o = but_rightbr =
		    new Fl_Button(FL_BUTT_GEO(2, 3), "]");
		o->shortcut(0x29);
		o->labelfont(0);
		o->labelsize(11);
		o->color(NxApp::Instance()->getGlobalColor(HILIGHT_LITE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		o->callback((Fl_Callback *) cb_but_rightbr, this);
	    }

	    {
		Fl_Button *o = but_exch =
		    new Fl_Button(FL_BUTT_GEO(3, 3), "exch");
		o->labelfont(0);
		o->labelsize(11);
		o->color(NxApp::Instance()->getGlobalColor(HILIGHT_LITE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		o->callback((Fl_Callback *) cb_but_exch, this);
	    }

	    {
		Fl_Button *o = but_invx =
		    new Fl_Button(FL_BUTT_GEO(4, 3), "1/x");
		o->labelfont(0);
		o->labelsize(11);
		o->color(NxApp::Instance()->getGlobalColor(HILIGHT_LITE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		o->callback((Fl_Callback *) cb_but_invx, this);
	    }

	    {
		Fl_Button *o = but_fact =
		    new Fl_Button(FL_BUTT_GEO(5, 3), "x!");
		o->labelfont(0);
		o->labelsize(11);
		o->color(NxApp::Instance()->getGlobalColor(HILIGHT_LITE));
		o->selection_color(NxApp::Instance()->
				   getGlobalColor(BUTTON_PUSH));
		o->labelcolor(NxApp::Instance()->getGlobalColor(APP_FG));
		o->callback((Fl_Callback *) cb_but_fact, this);
	    }

	}
	o->end();
    }

    init_value(0);
    drgmode = 1;
    base = 10;
    currentbrkt = 0;
    startbrkt[0] = 0;
    set_memdisp();
    set_brktdisp();
    radio_10->value(1);
    set_drgdisp();
    set_display(0.0, NONE);
}


//SciCalc::~SciCalc() {
//}

void
SciCalc::SetButtonWindowGeometry(int x_size, int y_size, int width,
				 int height, int columns, int rows)
{
    button_win_x = x_size;
    button_win_y = y_size;
    button_win_w = width;
    button_win_h = height;
    button_win_row = rows;
    button_win_col = columns;
    button_h = (button_win_h / button_win_row) * 9 / 10;
    button_w = (button_win_w / button_win_col) * 9 / 10;
    ButtonGeometryValid = TRUE;
    return;
}

int
SciCalc::GetButtonPosX(int col)
{
    return (int) ((button_win_w / button_win_col) * (col - .5)) -
	(button_w / 2);
}

int
SciCalc::GetButtonPosY(int row)
{
    return (int) ((button_win_h / button_win_row) * (row - .5)) -
	(button_h / 2);
}

int
SciCalc::GetButtonWidth()
{
    return button_w;
}

int
SciCalc::GetButtonHeight()
{
    return button_h;
}

void
SciCalc::resize_notify(int x, int y, int w, int h)
{
    do_resize(w, h);
}

#ifdef NOTUESD
void
Fl_Double_Window::resize_notify(int x, int y, int w, int h)
{
}
#endif

void
SciCalc::do_resize(int w, int h)
{
    if ((old_w == w) && (old_h == h))
	return;
    old_w = w;
    old_h = h;
    leddisplay->resize(5, 3, w - 8, 24);
    status_window->resize(0, 0, w, 70);
    out_data_group->resize(((w - 135) / 2), 26, 136, 16);
    box_DEGRAD->resize(((w - 135) / 2) + 1, 27, 35, 15);
    box_bracket->resize(((w - 135) / 2) + 36, 27, 65, 15);
    box_M->resize(((w - 135) / 2) + 101, 27, 35, 15);
    num_mode_window->resize(((w - 93) / 2), 44, 93, 22);
    check_inv->resize((((w - 93) / 2) - 32) / 2, 44, w / 6, 21);
    to_sci_mode->resize(w - ((((w - 93) / 2) - 32) / 2 + 29), 44, w / 6, 21);
    to_simple_mode->resize(w - ((((w - 93) / 2) - 32) / 2 + 29), 44, w / 6,
			   21);
    tmp_x = 0;
    tmp_y = 70;
    tmp_h = (h - 70) * 4 / 10;
    tmp_w = w;
    SetButtonWindowGeometry(tmp_x, tmp_y, w, tmp_h, 5, 3);
    sci_view_window->resize(tmp_x, tmp_y, w, tmp_h);
    but_sqrt->resize(FL_BUTT_GEO(1, 1));
    but_pow->resize(FL_BUTT_GEO(2, 1));
    but_sin->resize(FL_BUTT_GEO(3, 1));
    but_cos->resize(FL_BUTT_GEO(4, 1));
    but_tan->resize(FL_BUTT_GEO(5, 1));
    but_log->resize(FL_BUTT_GEO(1, 2));
    but_ln->resize(FL_BUTT_GEO(2, 2));
    but_int->resize(FL_BUTT_GEO(3, 2));
    but_dr->resize(FL_BUTT_GEO(4, 2));
    but_drg->resize(FL_BUTT_GEO(5, 2));
    but_leftbr->resize(FL_BUTT_GEO(1, 3));
    but_rightbr->resize(FL_BUTT_GEO(2, 3));
    but_exch->resize(FL_BUTT_GEO(3, 3));
    but_invx->resize(FL_BUTT_GEO(4, 3));
    but_fact->resize(FL_BUTT_GEO(5, 3));
    if (SciMode) {
	tmp_y += tmp_h;
	sci_view_window->show();
    } else if (!SciMode) {
	tmp_y = 70;
    }
    tmp_h = h - tmp_y;
    SetButtonWindowGeometry(tmp_x, tmp_y, tmp_w, tmp_h, 5, 5);
    simple_view_window->resize(tmp_x, tmp_y, tmp_w, tmp_h);
    but_7->resize(FL_BUTT_GEO(1, 2));
    but_8->resize(FL_BUTT_GEO(2, 2));
    but_9->resize(FL_BUTT_GEO(3, 2));
    but_4->resize(FL_BUTT_GEO(1, 3));
    but_5->resize(FL_BUTT_GEO(2, 3));
    but_6->resize(FL_BUTT_GEO(3, 3));
    but_1->resize(FL_BUTT_GEO(1, 4));
    but_2->resize(FL_BUTT_GEO(2, 4));
    but_3->resize(FL_BUTT_GEO(3, 4));
    but_0->resize(FL_BUTT_GEO(1, 5));
    but_dot->resize(FL_BUTT_GEO(2, 5));
    but_sign->resize(FL_BUTT_GEO(3, 5));
    but_C->resize(FL_BUTT_GEO(4, 2));
    but_AC->resize(FL_BUTT_GEO(5, 2));
    but_X->resize(FL_BUTT_GEO(4, 3));
    but_div->resize(FL_BUTT_GEO(5, 3));
    but_plus->resize(FL_BUTT_GEO(4, 4));
    but_minus->resize(FL_BUTT_GEO(5, 4));
    but_pi->resize(FL_BUTT_GEO(4, 5));
    but_eval->resize(FL_BUTT_GEO(5, 5));
    but_Mplus->resize(FL_BUTT_GEO(1, 1));
    but_Mmult->resize(FL_BUTT_GEO(2, 1));
    but_Mclear->resize(FL_BUTT_GEO(3, 1));
    but_Mst->resize(FL_BUTT_GEO(4, 1));
    but_Mrc->resize(FL_BUTT_GEO(5, 1));
//      status_window->redraw();
//      simple_view_window->redraw();
//      sci_view_window->redraw();

}


void
SciCalc::run(int px, int py)
{


#ifdef NANOX
/*
  Window xid;
  GR_WINDOW_INFO win_info;
  GR_WM_PROPERTIES win_props;
  Window parent_xid;	

  win_props.flags = GR_WM_FLAS_PROPS;
  win_props.props = DEF_STYLE;
  GrSetWMProperties(xid, &win_props);
*/
//      main_window->wm_props = DEF_STYLE;
#endif
    main_window->show();
    Fl::run();
}

void
SciCalc::handle_number(double numb)
{
    int first;
    double sign;

    if (ready)
	init_value(top);


    if (numb == -1.0)
	if (dot)		/* check whether we already have a dot */
	    return;
	else {
	    dot = 1;
	    set_display(value[top], DOT);
	    return;
	}

    if (emode) {
	sign = copysign(1.0, (double) exponent);
	if (abs(exponent) * 10 + numb > 999) {	/* cycle if exponent has > 3 digits */
	    first = (int) floor((double) abs(exponent) / 100.0);
	    exponent = abs(exponent) - 100 * first;
	    exponent *= (int) sign;
	}
	exponent = exponent * 10 + (int) (sign * numb);
	value[top] = mantissa * pow(10.0, (double) exponent);
	set_display(mantissa, EXP);
    } else if (numb < base) {	/* both decimal and non decimal number entry */
	sign = copysign(1.0, value[top]);
	if (dot && behind < 9) {
	    behind++;
	    diver = diver / (double) base;
	    value[top] += sign * diver * numb;
	} else if ((!dot) && (value[top] < 1.0e10))
	    value[top] = (double) base *value[top] + sign * numb;

	set_display(value[top], (mode) behind);
    }
}

void
SciCalc::handle_operator(Operator op)
{
    int prevop, i, finished;

    switch (op) {
    case PLUS:
    case MINUS:
    case MULT:
    case DIV:
    case POW:
    case INVPOW:
	finished = 0;
	do {
	    if (top == startbrkt[currentbrkt])
		finished = 1;	/* is 1st operator */
	    if (!finished) {	/* compare priority of previous operators with current op */
		prevop = oper[top - 1];
		if (priority[prevop] < priority[op])
		    finished = 1;
		else {		/* last op can be calculated */
		    top--;
		    calc(top);
		}
	    }
	} while (!finished);

	oper[top] = op;
	init_value(top + 1);

	set_display(value[top - 1], NORM);
	break;

    case EVAL:
	while (currentbrkt > 0)
	    add_right_bracket();
	for (i = top; i > 0; i--)
	    calc(i - 1);
	top = 0;
	ready = 1;
	set_display(value[top], NORM);
	break;
    }
}

void
SciCalc::change_base(int newbase)
{
    int oldbase;

    oldbase = base;
    base = newbase;
    but_2->labelcolor(0);
    but_3->labelcolor(0);
    but_4->labelcolor(0);
    but_5->labelcolor(0);
    but_6->labelcolor(0);
    but_7->labelcolor(0);
    but_8->labelcolor(0);
    but_9->labelcolor(0);

    if (base <= 8) {
	but_9->labelcolor(FL_WHITE);
    }
    if (base == 2) {
	but_8->labelcolor(FL_WHITE);
	but_7->labelcolor(FL_WHITE);
	but_6->labelcolor(FL_WHITE);
	but_5->labelcolor(FL_WHITE);
	but_4->labelcolor(FL_WHITE);
	but_3->labelcolor(FL_WHITE);
	but_2->labelcolor(FL_WHITE);
    }
    simple_view_window->redraw();
    set_display(value[top], NORM);
    ready = 1;
    if ((oldbase == 16) || (base == 16))
	setnormlabels();
}

void
SciCalc::set_display(double val, mode behind)
{
    int i;
    char dispstr[40], expstr[10], str2[10];

    /* number or operator handled to get here so reset inv stuff */
/*
	if (inv) 
	{
		inv = 0;
		check_inv->value(0);
		setnormlabels();
	}*/
    if (behind >= 0) {		/* format with appropriate number of decimal places */
	if (base == 10) {
	    emode = 0;
	    strcpy(str2, "%.1f");
	    str2[2] = behind + '0';
	    sprintf(dispstr, str2, val);
	} else			/* non base 10 display */
	    cvttobase(val, base, behind, dispstr);
    } else if (behind == DOT) {	/* display the . at the right */
	if (base == 10) {
	    emode = 0;
	    sprintf(dispstr, "%.1f", val);
	    dispstr[strlen(dispstr) - 1] = 0;
	} else
	    cvttobase(val, base, behind, dispstr);
    } else if (behind == NORM) {	/* normal display */
	if (base == 10) {
	    emode = 0;
	    sprintf(dispstr, "%.9g", val);
	} else			/* non base 10 display */
	    cvttobase(val, base, behind, dispstr);
    } else {			/* exponent entering display */
	sprintf(dispstr, "%.8f", val);
	for (i = strlen(dispstr); dispstr[i - 1] == '0'; i--);
	dispstr[i] = 0;
	strcat(dispstr, "e");
	sprintf(expstr, "%d", exponent);
	strcat(dispstr, expstr);
    }
    strcat(dispstr, " ");
    dispstr[17] = 0;
    leddisplay->value(dispstr);
    leddisplay->redraw();
}

void
SciCalc::set_memdisp()
{
    if (mem)
	box_M->value("M");
    else
	box_M->value("");
    box_M->redraw();
}

void
SciCalc::set_drgdisp()
{
    if (drgmode == 0)
	box_DEGRAD->value("DEG");
    else if (drgmode == 1)
	box_DEGRAD->value("RAD");
    else
	box_DEGRAD->value("GRAD");
    box_DEGRAD->redraw();
}

void
SciCalc::set_brktdisp()
{
    char dispstr[40];

    if (currentbrkt > 0) {
	sprintf(dispstr, "%d [ max %d", currentbrkt, MaxNumBrkts);
	box_bracket->value(dispstr);
    } else
	box_bracket->value("");
    box_bracket->redraw();
}

void
SciCalc::add_left_bracket()
{
    if (currentbrkt < MaxNumBrkts) {
	currentbrkt++;
	startbrkt[currentbrkt] = top;
	ready = 1;
	set_brktdisp();
    }
}

void
SciCalc::add_right_bracket()
{
    int i;

    if (currentbrkt > 0) {
	for (i = top; i > startbrkt[currentbrkt]; i--)
	    calc(i - 1);
	top = startbrkt[currentbrkt];
	currentbrkt--;
	ready = 1;
    }
    set_display(value[top], NORM);
    set_brktdisp();
}

void
SciCalc::factorial()
{
    double lg, alpha;

    /* uses gamma functions to get result for non-integer values */

    alpha = value[top] + 1.0;
    if ((floor(alpha) == alpha) && (alpha <= 0.0)) {
	init_value(0);
	leddisplay->value("Error: -ve integer ");
	leddisplay->redraw();
    } else if (alpha > 32) {
	lg = exp(gammaln(alpha));
	value[top] = lg;
	set_display(value[top], NORM);
	ready = 1;
    } else if (alpha > 1.0) {
	int n = (int) truncf(alpha);
	lg = 1.0;
	for (int i = 1; i < n; i++)
	    lg *= i;
	value[top] = lg;
	set_display(value[top], NORM);
	ready = 1;
    }
}

void
SciCalc::exchange()
{
    double temp;

    /* check if we have 2 values to exchange */
    if (top > startbrkt[currentbrkt]) {
	temp = value[top];
	value[top] = value[top - 1];
	value[top - 1] = temp;

	set_display(value[top], NORM);
	ready = 1;
    }
}

void
SciCalc::exponent_pi()
{
    if ((value[top] == 0.0) || (ready)) {
	value[top] = M_PI;
	set_display(value[top], NORM);
	ready = 1;
    } else if ((!emode) && (base == 10)) {
	emode = 1;
	exponent = 0;
	mantissa = value[top];
	set_display(mantissa, EXP);
    }
}

void
SciCalc::calc(int i)
{
    switch (oper[i]) {
    case PLUS:
	value[i] += value[i + 1];
	break;
    case MINUS:
	value[i] -= value[i + 1];
	break;
    case MULT:
	value[i] *= value[i + 1];
	break;
    case DIV:
	value[i] /= value[i + 1];
	break;
    case POW:
	value[i] = pow(value[i], value[i + 1]);
	break;
    case INVPOW:
	value[i] = pow(value[i], 1.0 / value[i + 1]);
	break;
    }
}

void
SciCalc::init_value(int lev)
{
    top = lev;
    value[top] = 0.0;
    ready = 0;
    emode = 0;
    dot = 0;
    diver = 1.0;
    behind = 0;
    if (inv) {
	inv = 0;
	check_inv->value(0);
	setnormlabels();
    }
}

void
SciCalc::cvttobase(double num, int base, mode behind, char *str)
{
    double sign, div;
    int place, digit, i;
    char digstr[2];

    sign = copysign(1.0, num);
    num *= sign;
    if (sign == -1.0)
	sprintf(str, "-");
    else
	str[0] = 0;

    if (num == 0.0) {
	sprintf(str, "0");
	if (behind > 0) {
	    strcat(str, ".");
	    for (i = 0; i < behind; i++)
		strcat(str, "0");
	}
	return;
    }
    place = (int) (log(num) / log((double) base));
    if (place < 0)
	place = 0;
    do {
	div = pow((double) base, (double) place);
	digit = (int) (num / div);
	num -= (double) digit *div;
	if (place == -1)
	    strcat(str, ".");
	place--;
	sprintf(digstr, "%x", digit);
	strcat(str, digstr);
	if (strlen(str) > 18) {
	    sprintf(str, "can't display");
	    return;
	}
    } while ((place >= 0) || ((place >= -9) && (num != 0.0)));

    if ((place == -1) && ((behind == DOT) || (behind > 0)))
	strcat(str, ".");
    while ((behind > 0) && (behind >= -place)) {
	strcat(str, "0");
	place--;
    }
}

void
SciCalc::setnormlabels()
{
    if (base <= 10) {
	but_sqrt->label("sqrt");
	but_pow->label("x^y");
	but_sin->label("sin");
	but_cos->label("cos");
	but_tan->label("tan");
	but_log->label("log");
	but_sqrt->labelcolor(FL_BLUE);
	but_pow->labelcolor(FL_BLUE);
	but_sin->labelcolor(FL_BLUE);
	but_cos->labelcolor(FL_BLUE);
	but_tan->labelcolor(FL_BLUE);
	but_log->labelcolor(FL_BLUE);
    } else {
	but_sqrt->label("a");
	but_pow->label("b");
	but_sin->label("c");
	but_cos->label("d");
	but_tan->label("e");
	but_log->label("f");
	but_sqrt->labelcolor(FL_BLACK);
	but_pow->labelcolor(FL_BLACK);
	but_sin->labelcolor(FL_BLACK);
	but_cos->labelcolor(FL_BLACK);
	but_tan->labelcolor(FL_BLACK);
	but_log->labelcolor(FL_BLACK);
    }
    but_ln->label("ln");
    but_int->label("int");
    but_dr->label("d->r");
    but_Mplus->label("M+");
    but_Mmult->label("M*");
    but_Mclear->label("MC");
    but_sqrt->redraw();
    but_pow->redraw();
    but_sin->redraw();
    but_cos->redraw();
    but_tan->redraw();
    but_log->redraw();
    but_ln->redraw();
    but_int->redraw();
    but_dr->redraw();
    but_Mplus->redraw();
    but_Mmult->redraw();
    but_Mclear->redraw();
}

void
SciCalc::setinvlabels()
{
    if (base <= 10) {
	but_sqrt->label("x^2");
	but_pow->label("x^1/y");
	but_sin->label("asin");
	but_cos->label("acos");
	but_tan->label("atan");
	but_log->label("10^x");
	but_sqrt->labelcolor(FL_BLUE);
	but_pow->labelcolor(FL_BLUE);
	but_sin->labelcolor(FL_BLUE);
	but_cos->labelcolor(FL_BLUE);
	but_tan->labelcolor(FL_BLUE);
	but_log->labelcolor(FL_BLUE);
    } else {
	but_sqrt->label("a");
	but_pow->label("b");
	but_sin->label("c");
	but_cos->label("d");
	but_tan->label("e");
	but_log->label("f");
	but_sqrt->labelcolor(FL_BLACK);
	but_pow->labelcolor(FL_BLACK);
	but_sin->labelcolor(FL_BLACK);
	but_cos->labelcolor(FL_BLACK);
	but_tan->labelcolor(FL_BLACK);
	but_log->labelcolor(FL_BLACK);
    }
    but_ln->label("e^x");
    but_int->label("frac");
    but_dr->label("r->d");
    but_Mplus->label("M-");
    but_Mmult->label("M/");
    but_Mclear->label("Mex");
    but_sqrt->redraw();
    but_pow->redraw();
    but_sin->redraw();
    but_cos->redraw();
    but_tan->redraw();
    but_log->redraw();
    but_ln->redraw();
    but_int->redraw();
    but_dr->redraw();
    but_Mplus->redraw();
    but_Mmult->redraw();
    but_Mclear->redraw();
}

void
SciCalc::mem_exchange()
{
    double temp;

    temp = mem;
    mem = value[top];
    value[top] = temp;

    set_display(value[top], NORM);
    ready = 1;
    set_memdisp();
}

double
SciCalc::to_drg(double angle)
{
    if (drgmode == 0)
	return (M_PI * angle / 180.0);
    else if (drgmode == 2)
	return (M_PI * angle / 100.0);
    else
	return (angle);
}

double
SciCalc::from_drg(double angle)
{
    if (drgmode == 0)
	return (180.0 * angle / M_PI);
    else if (drgmode == 2)
	return (100.0 * angle / M_PI);
    else
	return (angle);
}

void
SciCalc::memexch()
{
    double temp;

    temp = mem;
    mem = value[top];
    value[top] = temp;
    set_display(value[top], NORM);
    ready = 1;
    set_memdisp();
}
