.TH DUMPKEYS 1 "09 Oct 1997" "Console tools" "Linux User's Manual"

.SH NAME
dumpkeys \- dump keyboard translation tables

.SH SYNOPSIS
.B dumpkeys [
.I \-hilfn1
.IB \-S shape
.IB \-c charset
.I \-\-help \-\-short\-info \-\-long\-info \-\-numeric \-\-full\-table
.I \-\-separate\-lines 
.IB \-\-shape= shape
.I \-\-funcs\-only \-\-keys\-only \-\-compose\-only
.IB \-\-charset= charset
.B ]

.SH DESCRIPTION
.IX "dumpkeys command" "" "\fLdumpkeys\fR command"  

.B dumpkeys
writes, to the standard output, the current contents of the keyboard
driver's translation tables, in the format specified by
.BR keymaps (5).
.PP
Using the various options, the format of the output can be controlled
and also other information from the kernel and the programs
.BR dumpkeys (1)
and
.BR loadkeys (1)
can be obtained.

.SH OPTIONS
.TP
.I \-h \-\-help
Prints the program's version number and a short usage message to the
program's standard error output and exits.

.TP
.I \-i \-\-short-info
Prints some characteristics of the kernel's keyboard driver. The items
shown are:

.RS
Keycode range supported by the kernel:
.PP
.RS
This tells what values can be used after the
.B keycode
keyword in keymap files. See
.BR keymaps (5)
for more information and the syntax of these files.
.RE

Number of actions bindable to a key:
.PP
.RS
This tells how many different actions a single key can output using
various modifier keys. If the value is 16 for example, you can define up
to 16 different actions to a key combined with modifiers. When the value
is 16, the kernel probably knows about four modifier keys, which you can
press in different combinations with the key to access all the bound
actions.
.RE

Ranges of action codes supported by the kernel:
.PP
.RS
This item contains a list of action code ranges in hexadecimal notation.
These are the values that can be used in the right hand side of a key
definition, ie. the
.IR vv 's
in a line

.RS
.B keycode
.I xx
=
.I vv vv vv vv
.RE

(see
.BR keymaps (5)
for more information about the format of key definition lines).
.BR dumpkeys (1)
and
.BR loadkeys (1)
support a symbolic notation, which is preferable to the numeric one, as
the action codes may vary from kernel to kernel while the symbolic names
usually remain the same. However, the list of action code ranges can be
used to determine, if the kernel actually supports all the symbols
.BR loadkeys (1)
knows, or are there maybe some actions supported by the kernel that
have no symbolic name in your
.BR loadkeys (1)
program. To see this, you compare the range list with the action symbol
list, see option
.I --long-info
below.
.RE

Number of function keys supported by kernel:
.PP
.RS
This tells the number of action codes that can be used to output
strings of characters. These action codes are traditionally bound to
the various function and editing keys of the keyboard and are defined
to send standard escape sequences. However, you can redefine these to
send common command lines, email addresses or whatever you like.
Especially if the number of this item is greater than the number of
function and editing keys in your keyboard, you may have some "spare"
action codes that you can bind to AltGr-letter combinations, for example,
to send some useful strings. See
.BR loadkeys (1)
for more details.
.RE

Function strings:
.PP
.RS
You can see you current function key definitions with the command

.RS
.BI dumpkeys --funcs-only
.RE
.RE
.RE

.TP
.I \-l \-\-long-info
This option instructs
.B dumpkeys
to print a long information listing. The output is the same as with the
.I --short-info
appended with the list of action symbols supported by
.BR loadkeys (1)
and
.BR dumpkeys (1),
along with the symbols' numeric values.

.TP
.I \-n \-\-numeric
This option causes
.B dumpkeys
to by-pass the conversion of action code values to symbolic notation and
to print the in hexadecimal format instead.

.TP
.I \-f \-\-full-table
This makes
.B dumpkeys
skip all the short-hand heuristics (see
.BR keymaps (5))
and output the key bindings in the canonical form. First a keymaps
line describing the currently defined modifier combinations is
printed. Then for each key a row with a column for each modifier
combination is printed. For example, if the current keymap in use uses
seven modifiers, every row will have seven action code columns. This
format can be useful for example to programs that post-process the
output of
.BR dumpkeys .

.TP
.I \-1 \-\-separate\-lines
This forces
.B dumpkeys
to write one line per (modifier,keycode) pair.  It prefixes the word
.I plain
for plain keycodes.

.TP
.IB "\-S \-\-shape=" shape
Tells
.B dumpkeys
to use the specified table shape.  Allowed shapes are
.BI 0 :
default shape (same as no
.IR \-S );
.BR 1 :
same as option
.IR \-\-full\-table ;
.BR 2 :
same as option
.IR \-\-separate\-lines ;
.BR 3 :
display one line per keycode (as in shape
.BR 1 ),
 until first hole is met, then use one line per (modifier,keycode)
pair (as in shape
.BR 2 ).

.TP
.I \-\-funcs-only
When this option is given,
.B dumpkeys
prints only the function key string definitions. Normally
.B dumpkeys
prints both the key bindings and the string definitions.

.TP
.I \-\-keys-only
When this option is given,
.B dumpkeys
prints only the key bindings. Normally
.B dumpkeys
prints both the key bindings and the string definitions.

.TP
.I \-\-compose-only
When this option is given,
.B dumpkeys
prints only the compose key combinations.
This option is available only if your kernel has compose key support.

.TP
.IB \-c "charset " \-\-charset= charset
This instructs
.B dumpkeys
to interpret character code values according to the specified character
set. This affects only the translation of character code values to
symbolic names. Valid values for
.I charset
are listed by the
.I \-\-help
option. If no
.I charset
is specified,
.B iso-8859-1
is used as a default. This option produces an output line `charset
"iso-8859-X"', telling loadkeys how to interpret the keymap. (For example,
"division" is 0xf7 in 
.B iso-8859-1
but 0xba in 
.BR iso-8859-8 ).

.SH FILES
.I @datadir@/keymaps/
recommended directory for keymap files

.SH "SEE ALSO"
.BR loadkeys (1),
.BR keymaps (5).
