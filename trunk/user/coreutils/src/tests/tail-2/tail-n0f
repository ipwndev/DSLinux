#!/bin/sh
# Make sure that `tail -n0 -f' and `tail -c0 -f' sleep
# rather than doing what amounted to a busy-wait.

# Copyright (C) 2003, 2006 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.


# This bug was fixed for 5.0.91
# It skips the test if your system lacks a /proc/$pid/status
# file, or if its contents don't look right.

if test "$VERBOSE" = yes; then
  set -x
  tail --version
fi

sleep 2 &
pid=$!
sleep .5
grep '^State:[	 ]*[S]' /proc/$pid/status > /dev/null 2>&1 || \
  {
    echo "$0:/proc/$pid/status: missing or 'different': skipping this test" 1>&2
    (exit 77); exit 77
  }
kill $pid

pwd=`pwd`
t0=`echo "$0"|sed 's,.*/,,'`.tmp; tmp=$t0/$$
trap 'status=$?; cd "$pwd" && chmod -R u+rwx $t0 && rm -rf $t0 && exit $status' 0
trap '(exit $?); exit $?' 1 2 13 15

framework_failure=0
mkdir -p $tmp || framework_failure=1
cd $tmp || framework_failure=1
touch empty || framework_failure=1
echo anything > nonempty || framework_failure=1

if test $framework_failure = 1; then
  echo "$0: failure in testing framework" 1>&2
  (exit 1); exit 1
fi

fail=0

for file in empty nonempty; do
  for c_or_n in c n; do
    tail --sleep=4 -${c_or_n} 0 -f $file &
    pid=$!
    sleep .5
    set _ `sed -n '/^State:[	 ]*\([^	 ]\)/s//\1/p' /proc/$pid/status`
    shift # Remove the leading `_'.
    state=$1
    case $state in
      S*) ;;
      *) echo $0: process in unexpected state: $state 1>&2; fail=1 ;;
    esac
    kill $pid
  done
done

(exit $fail); exit $fail
