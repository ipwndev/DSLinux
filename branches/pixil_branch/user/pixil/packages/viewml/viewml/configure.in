dnl# -*- sh -*-
dnl# the "configure" script is made from this by running GNU "autoconf"
dnl#
dnl# "$Id$"
dnl#
dnl# Configuration script for ViewML
dnl#
dnl# Copyright 2000 by Century Software Embedded Technologies.
dnl#

AC_INIT(src/html.cpp)

dnl# Since they specified the host, we go ahead and check for all those fellas in the path

AC_CANONICAL_SYSTEM

dnl# Borrowed from tsch configure script - it alerts the user to the fact that the
dnl# cache has different info

AC_MSG_CHECKING([cached host tuple])
if { test x"${ac_cv_host_system_type+set}" = x"set" &&
     test x"$ac_cv_host_system_type" != x"$host"; }; then
  AC_MSG_RESULT([different])
  AC_MSG_ERROR([remove config.cache and re-run configure])
else
  AC_MSG_RESULT(ok)
fi
ac_cv_host_system_type="$host"

dnl# For our purposes, we want whatever the user entered, its easier that way, so
dnl# set host accordingly for rest of the script

host=$host_alias
 
echo "Configuring for $host"

AC_CHECK_TOOL(CC, gcc, :)
AC_CHECK_TOOL(CXX, g++, :)
AC_CHECK_TOOL(LD, ld, :)
AC_CHECK_TOOL(AR, ar, :)
AC_CHECK_TOOL(RANLIB, ranlib, :)
AC_CHECK_TOOL(STRIP, strip, :)

dnl# Now, ensure that the tools we specified above work like they should

AC_PROG_CC
AC_PROG_CXX

dnl# Check for --permissive

CFLAGS="-g" 
CXXFLAGS="-g"

dnl# Apparently, our KDE core isn't ANSI compilant (Imagine that....)
dnl# So this code tests the compiler, and if it is too anal, then we
dnl# add the --permissive flag to make it more friendly

echo -n "checking whether mipsel-linux-g++ requires --permissive... "
AC_LANG_CPLUSPLUS

AC_TRY_COMPILE(
[],
[class foo { public: operator++() { return 1; } }; 
foo bar; bar++; ],
CXXFLAGS="$CXXFLAGS"
echo "no",
CXXFLAGS="$CXXFLAGS --permissive"
echo "yes"
)

dnl# Library handling

LIBS="-lpthread"

INCLUDES="-I$prefix/include -I. -I../kdecore -I../kimgio -I../kdeui -I../jscript"

dnl# Determine if this is to be linked against shared or static libraries
AC_ARG_ENABLE(static, [ --enable-static  Informs the makefile to link with static libraries],
[
	echo "Linking with static libraries"
	LDFLAGS="$LDFLAGS --static"
])

dnl# Tell the makefile where to find the flk stuff

AC_ARG_WITH(flek, [ --with-flek=[flek path] Path to the flek files are located],
[
	echo "Grabbing FLEK from $with_flek..."
	LIBS="$LIBS -L$with_flek/lib -lflek"
	INCLUDES="$INCLUDES -I$with_flek -I$with_flek/Flek -I./flek"
	FLAGS="$CFLAGS -DUSING_FLEK_LIB"
	CXXFLAGS="$CXXFLAGS -DUSING_FLEK_LIB"
])

FLTK="/usr/local"
AC_ARG_WITH(fltk, [  --with-fltk=[fltk path] Informs the makefile where the FLTK files are located],
[
	echo "Grabbing FLTK from $with_fltk..."
	FLTK=$with_fltk
	LIBS="$LIBS -L$with_fltk/lib -lfltk"
 	INCLUDES="$INCLUDES -I$with_fltk -I$with_fltk/FL -I./fltk" 
])

AC_ARG_WITH(nxapp, [ --with-nxapp=[nxapp base path] Specifies where nxapp framework lives],
[
        echo "Found NxApp Framework in $with_nxapp"
        NXAPPFOLDER=$with_nxapp
        INCLUDES="$INCLUDES -I$NXAPPFOLDER"
        LIBS="$NXAPPFOLDER/libpixil-pim.a $LIBS"
])

AC_ARG_WITH(microwin, [  --with-microwin=[microwindows base path]  Specifies where Microwindows lives], 
[ 
  echo "Found MicroWindows in $with_microwin"
  MWFOLDER=$with_microwin
  INCLUDES="$INCLUDES -I$MWFOLDER/include -I$includedir/microwin" 
  FLAGS="$CFLAGS -DNANOX -D_NANOX"host_alias
  CXXFLAGS="$CXXFLAGS -DNANOX -D_NANOX"
  LIBS="$LIBS -ljpeg -L$MWFOLDER/lib -lnano-X -lmwengine -lmwdrivers -lmwfonts"
  NANOX=1 
])

dnl# Check for libwww-config location
AC_ARG_WITH(libwwwconf, [ --with-libwwwconf=[path to libwww-conf]    Specifies where libwwwconf lives],
[
	if test -f $with_libwwwconf/libwww-config; then
		LIBWWW_CONFIG=$with_libwwwconf/libwww-config
	else
		AC_MSG_ERROR([libwww-conf not found in $with_libwwwconf])
	fi
])

dnl# Need to find the path for the cross compiler libs/tools, etc....
ac_tool_tp1=
ac_tool_tp2=
if test "x"$ac_tool_prefix != "x"; then
	ac_tool_path=`which ${ac_tool_prefix}gcc`
	if test "x"$ac_tool_path != "x"; then
		ac_tool_tp1=`dirname $ac_tool_path`
		ac_tool_tp2=`dirname $ac_tool_tp1`/$host_alias/bin
	fi
fi
AC_PATH_PROG(LIBWWW_CONFIG, libwww-config, :, $ac_tool_tp1:$ac_tool_tp2:$prefix/bin:$PATH)
if test -z $LIBWWW_CONFIG -o $LIBWWW_CONFIG = ":"; then
	AC_MSG_ERROR([Unable to locate libwww-config, please specify with --with-libwwwconf=[path]])
fi

AC_ARG_WITH(xdrivers, [ --with-xdrivers  Specify that Nano-X is using X11 drivers],
[
    echo "Building Nano-X with X11 drivers..."
    AC_PATH_XTRA
    LIBS="$LIBS $X_LIBS $X_PRE_LIBS -lX11 $X_EXTRA_LIBS" 
    CFLAGS="$CFLAGS $X_CFLAGS"
    CXXFLAGS="$CXXFLAGS $X_CFLAGS"
])

dnl# If NanoX was not selected, then figure out the X lib stuff

if [ test ! $NANOX ]; then \
    echo "Building with X11..."
    AC_PATH_XTRA
    LIBS="$LIBS $X_LIBS $X_PRE_LIBS -lX11 $X_EXTRA_LIBS \`imlib-config --libs\`"
    CFLAGS="$CFLAGS $X_CFLAGS"
    CXXFLAGS="$CXXFLAGS $X_CFLAGS"
fi

AC_PROG_MAKE_SET

AC_SUBST(INCLUDES)
AC_SUBST(LIBWWW_CONFIG)
dnl# AC_SUBST(CC)
dnl# AC_SUBST(CXX)
dnl# AC_SUBST(LD)
dnl# AC_SUBST(AR)
dnl# AC_SUBST(RANLIB)

AC_OUTPUT(Makefile makeinclude)
