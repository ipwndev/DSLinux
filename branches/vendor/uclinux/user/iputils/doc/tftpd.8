.\" This manpage has been automatically generated by docbook2man 
.\" from a DocBook document.  This tool can be found at:
.\" <http://shell.ipoline.com/~elmert/comp/docbook2X/> 
.\" Please send any bug reports, improvements, comments, patches, 
.\" etc. to Steve Cheng <steve@ggi-project.org>.
.TH "TFTPD" "8" "27 September 2002" "iputils-020927" "System Manager's Manual: iputils"
.SH NAME
tftpd \- Trivial File Transfer Protocol server
.SH SYNOPSIS

\fBtftpd\fR \fB\fIdirectory\fB\fR

.SH "DESCRIPTION"
.PP
\fBtftpd\fR is a server which supports the DARPA
Trivial File Transfer Protocol
(RFC1350).
The TFTP server is started
by \fBinetd\fR(8).
.PP
\fIdirectory\fR is required argument; if it is not given
\fBtftpd\fR aborts. This path is prepended to any file name requested
via TFTP protocol, effectively chrooting \fBtftpd\fR to this directory.
File names are validated not to escape out of this directory, however
administrator may configure such escape using symbolic links.
.PP
It is in difference of variants of \fBtftpd\fR usually distributed
with unix-like systems, which take a list of directories and match
file names to start from one of given prefixes or to some random
default, when no arguments were given. There are two reasons not to
behave in this way: first, it is inconvenient, clients are not expected
to know something about layout of filesystem on server host.
And second, TFTP protocol is not a tool for browsing of server's filesystem,
it is just an agent allowing to boot dumb clients. 
.PP
In the case when \fBtftpd\fR is used together with
\fBrarpd\fR(8),
tftp directories in these services should coincide and it is expected
that each client booted via TFTP has boot image corresponding
its IP address with an architecture suffix following Sun Microsystems
conventions. See 
\fBrarpd\fR(8)
for more details.
.SH "SECURITY"
.PP
TFTP protocol does not provide any authentication.
Due to this capital flaw \fBtftpd\fR is not able to restrict
access to files and will allow only publically readable
files to be accessed. Files may be written only if they already
exist and are publically writable.
.PP
Impact is evident, directory exported via TFTP \fBmust not\fR
contain sensitive information of any kind, everyone is allowed
to read it as soon as a client is allowed. Boot images do not contain
such information as rule, however you should think twice before
publishing f.e. Cisco IOS config files via TFTP, they contain
\fBunencrypted\fR passwords and may contain some information
about the network, which you were not going to make public.
.PP
The \fBtftpd\fR server should be executed by \fBinetd\fR
with dropped root privileges, namely with a user ID giving minimal
access to files published in tftp directory. If it is executed
as superuser occasionally, \fBtftpd\fR drops its UID and GID
to 65534, which is most likely not the thing which you expect.
However, this is not very essential; remember, only files accessible
for everyone can be read or written via TFTP.
.SH "SEE ALSO"
.PP
\fBrarpd\fR(8),
\fBtftp\fR(1),
\fBinetd\fR(8).
.SH "HISTORY"
.PP
The \fBtftpd\fR command appeared in 4.2BSD. The source in iputils
is cleaned up both syntactically (ANSIized) and semantically (UDP socket IO).
.PP
It is distributed with iputils mostly as good demo of an interesting feature
(MSG_CONFIRM) allowing to boot long images by dumb clients
not answering ARP requests until they are finally booted.
However, this is full functional and can be used in production.
.SH "AVAILABILITY"
.PP
\fBtftpd\fR is part of \fIiputils\fR package
and the latest versions are  available in source form for anonymous ftp
ftp://ftp.inr.ac.ru/ip-routing/iputils-current.tar.gz.
