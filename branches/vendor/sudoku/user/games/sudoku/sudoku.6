.\" Written by Michael Kennett, July 2005. This work, and all
.\" associated files, has been placed into the public domain
.\" and may be used freely by anybody for any purpose.
.TH SUDOKU 6
.SH NAME
sudoku \- sudoku board game
.SH SYNOPSIS
(play the game)
.RS
.B sudoku
.RI [ options "] ... "
.RI [ <filename> ]
.RE
.PP
(generate boards)
.RS
.B sudoku -g
.RI [ <num> ]
.RI [ options "] ..."
.RE
.PP
(solve boards)
.RS
.B sudoku -v
.RI [ options "] ..."
.RE
.PP
(calculate statistics)
.RS
.B sudoku -s
.RI [ options "] ..."
.RE
.SH DESCRIPTION
The
.B sudoku
board game is played on a 9x9 grid, divided into rows, columns, and
9 blocks of 3x3 squares. The objective is to fill the empty squares
with the digits 1-9, so that each row, column, and block contains
each of the digits 1-9 (and hence, it is not possible for any digit to
appear twice in the same row, column or block).
.SH EXAMPLE
Consider the following board, and the squares marked `\fIa\fR'-`\fIh\fR'
and `\fIx\fR':

  5 . \fIa\fR | 6 \fIb\fR 1 | . . .       The digits appearing in each of the
  7 9 . | . . . | \fIc\fR 6 8       squares `\fIa\fR'-`\fIh\fR' can be uniquely
  \fId\fR 3 . | . 8 . | 7 . .       determined. For example, the value
 -------+-------+-------      at `\fIa\fR' must be 8, since an 8 appears
  . 5 . | 4 1 \fIe\fR | . . 2       in the other rows and columns of the
  . . 1 | \fIf\fR \fIx\fR . | 6 . .       block. Using similar logic, it must
  8 . . | . 3 7 | . 4 .       be true that:
 -------+-------+-------           \fIb\fR = 7        \fIf\fR = 8
  . . 4 | . 9 . | \fIg\fR 2 .            \fIc\fR = 1        \fIg\fR = 8
  2 8 \fIh\fR | . . . | . 9 7            \fId\fR = 1        \fIh\fR = 5
  . . . | 5 \fIi\fR 8 | . . 6            \fIe\fR = 6        \fIi\fR = 2

In contrast, it is not possible to uniquely determine the value of `\fIx\fR'
with the given information - it could take either the value 2 or 5.
.bp
The board now contains the squares:

  5 . 8 | 6 7 1 | . . .    It is now possible to determine the values
  7 9 . | . . . | 1 6 8    appearing in other empty squares.
  1 3 . | . 8 . | 7 . .
 -------+-------+-------
  . 5 . | 4 1 6 | . . 2
  . . 1 | 8 \fIx\fR . | 6 . .    <<< the value of \fIx\fR must now be 5.
  8 . . | . 3 7 | . 4 .
 -------+-------+-------
  . . 4 | . 9 . | 8 2 .
  2 8 5 | . . . | . 9 7
  . . . | 5 2 8 | . . 6

Repeating this process a few more times reveals the solution:

  5 4 8 | 6 7 1 | 2 3 9
  7 9 2 | 3 4 5 | 1 6 8
  1 3 6 | 9 8 2 | 7 5 4
 -------+-------+-------
  3 5 7 | 4 1 6 | 9 8 2
  4 2 1 | 8 5 9 | 6 7 3
  8 6 9 | 2 3 7 | 5 4 1
 -------+-------+-------
  6 1 4 | 7 9 3 | 8 2 5
  2 8 5 | 1 6 4 | 3 9 7
  9 7 3 | 5 2 8 | 4 1 6
.SH "GAME INTERFACE"
The
.B sudoku
game has a simple text interface (using the
.BR curses (3)
library). The board is displayed in the middle of the screen, along with
a summary of the allowed key presses. The cursor can be moved around the
board using the arrow keys or the standard
.BR vi (1)
movement keys, and each square (except for the fixed board squares that
are initially revealed) can be set to a given digit by pressing the
corresponding number key, or cleared by pressing either the `\fI0\fR' or
`\fI.\fR'
keys.
.SS "Generating a New Board"
A new board can be generated at any time by pressing the `\fIn\fR' key, and
either a \fIprecanned\fR or randomly generated board will be displayed.
If the \fB-n\fR command line option is set, then only \fIprecanned\fR boards
will be displayed.
.SS "Entering a Custom Board"
A custom board (e.g. found on the internet, or published in a newspaper)
can be entered into the game by first clearing the current board (press
the `\fIc\fR' key), entering the published squares (using the cursor
motion keys and entering the appropriate numbers), and then fixing the
squares by pressing the `\fIf\fR' key. At this point, the entered squares
will be fixed (and cannot be changed).
.SS "Hints"
The interactive game provides a simple hint mechanism to provide
assistance in solving the board. It attempts to highlight areas of the
board where moves can be made. If repeated hints are requested, the
system starts revealing the digit that can be placed on the board.

Often the hints can be quite cryptic. For example, consider the board
below:

    v v v

    . . 7 | . . \fB9\fR | . . .
    \fB9\fR . \fB6\fR | 7 \fB4\fR . | . \fB1\fR \fB5\fR
    . . \fB2\fR | \fB5\fR \fB1\fR . | . . .
   -------+-------+-------
 >  \fB6\fR . \fB5\fR | . 7 . | . . \fB8\fR  <    \fIThe characters ><v^ highlight the\fR
 >  . \fB7\fR . | . . . | . \fB3\fR .  <    \fIarea of the hint\fR
 >  \fB8\fR . . | . . . | \fB7\fR . \fB6\fR  <
   -------+-------+-------
    . . . | . \fB6\fR \fB7\fR | \fB8\fR . .
    \fB7\fR \fB4\fR . | . \fB5\fR . | \fB9\fR 6 \fB2\fR
    . 6 . | \fB4\fR . . | . . .

    ^ ^ ^

The system gives the hint `\fItry the digit 3\fR', but it is certainly not
obvious, with the revealed squares, where the 3 goes.

.SH OPTIONS
.TP
.BI -d
Describe the moves needed to solve the board. Can only be used with the
.B -v
option for solving
.I precanned
boards.
.TP
.BI -f <format>
Set output format. The supported formats are:
.ta 0.25i 1.25i
.nf
	\fBstandard\fR	Default text format; \fBstd\fR is a shortcut.
	\fBcompact\fR	Compact text format.
	\fBcsv\fR	Comma separated values, suitable for importing
			into a spreadsheet.
	\fBpostscript\fR	\fBps\fR is a shortcut.
	\fBhtml\fR	Simple HTML.
.fi
.TP
.BI -g "[<num>]"
Generate
.I <num>
boards (or just 1 board, if not specified) and write them to standard output.
.TP
.BI -n
No random boards generated in the interactive game. Requires the optional
file of \fIprecanned\fR boards to be specified.
.TP
.BI -r
Run in restricted mode, disallowing any games to be saved.
.TP
.BI -s
Calculate statistics for the
.I precanned
boards, and attempt to classify
the difficulty of solving the boards. Can be used with the
.B -v
option.
.TP
.BI -t "<filename>"
Set the template file. The file set on the command line will be used 
instead of the default template file.
.TP
.BI -v
Solve
.I precanned
boards, writing the solution to standard output.
.TP
.I <filename>
Name of the optional file containing
.I precanned
boards.
.SH ENVIRONMENT
No environment variables are used directly by the
.B sudoku
program.
.SH FILES
.TP
.BI /usr/lib/sudoku/template
Template file for generating new sudoku boards.
.TP
.BI /usr/lib/sudoku/precanned
Optional file, containing `precanned' sudoku boards.
.SH "FILE FORMATS"
.SS /usr/lib/sudoku/template
The template file contains a sequence of patterns that are used for
generating new
.B sudoku
boards. Each pattern is started by a line with a leading `%' character,
and consists of 9 lines of 9 characters. The character `.' represents a
square that is initially blank, and the character `*' represents a square
with a digit that is initially displayed.
.SS "Compact text format"
This format is similar to that of the template file, but contains
representations of game boards. Each board is started by a line with a
leading `%' character, followed by an optional title for the board that
is displayed when the game is played. This is followed by 9 lines of
9 characters, where the character `.' represents an initially empty square,
and the characters `1'-`9' give the value of a fixed board square that
is initially displayed. The
.B sudoku
program can read precanned files in this format, and will write them
when the
.B -fcompact
option is set.
.SS "Standard text format"
This format is very similar to the compact text format, but includes
additional characters to delimit the blocks in the board. The
.B sudoku
program can read precanned files in this format, and writes them by
default, unless another output format is set by the
.B -f
option.
.SS "Comma separated text format"
This format is useful for importing
.B sudoku
boards into a spreadsheet. It represents each board by 9 lines of
comma separated fields. Each field is blank, or contains a digit.
The
.B sudoku
program cannot read precanned files in this format, and writes them
when the
.B -fcsv
option is set. Unlike the standard or compact text formats, there
are no lines separating boards, and hence, it is really only feasible
to store one board per file.
.SS "Postscript format"
This format is useful for printing out
.B sudoku
boards. The
.B sudoku
program cannot read boards stored in this format, and writes them
when the
.B -fpostscript
option is set. Unlike the standard or compact text formats, it is
not possible to store multiple boards in the same file.
.SS "HTML format"
This format is useful for printing out
.B sudoku
boards. The
.B sudoku
program cannot read boards stored in this format, and writes them
when the
.B -fhtml
option is set. Unlike the standard or compact text formats, it is
not possible to store multiple boards in the same file.
.SH "SEE ALSO"
There are a large number of websites dedicated to the
.B sudoku
puzzle that can be found easily using a search engine.
Some of these sites provide game boards that can be challenging
to solve, and others provide strategies for finding moves.
.SH DIAGNOSTICS
There are limited diagnostics available when an error occurs.
.SH ACKNOWLEDGEMENTS
Mark Foreman for the HTML output format; Joanna Ferris and Heather for
encouraging this endeavour.
.SH AUTHOR
Michael Kennett (mike@laurasia.com.au)
.SH COPYRIGHT
This manual page, and all associated files, have been placed into
the public domain by Michael Kennett, July 2005. They may be used
by anybody for any purpose whatsoever, however \fBNO WARRANTY\fR, of any
sort, applies to this work.


